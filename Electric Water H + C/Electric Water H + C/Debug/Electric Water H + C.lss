
Electric Water H + C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001112  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00001112  000011a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  0080006e  0080006e  000011b4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000011b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000011e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000258  00000000  00000000  00001220  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e82  00000000  00000000  00001478  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d34  00000000  00000000  000032fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001529  00000000  00000000  0000402e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000057c  00000000  00000000  00005558  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a4a  00000000  00000000  00005ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013dc  00000000  00000000  0000651e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c8  00000000  00000000  000078fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 97 05 	jmp	0xb2e	; 0xb2e <__vector_1>
       8:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__vector_2>
       c:	0c 94 f1 05 	jmp	0xbe2	; 0xbe2 <__vector_3>
      10:	0c 94 6d 06 	jmp	0xcda	; 0xcda <__vector_4>
      14:	0c 94 9a 06 	jmp	0xd34	; 0xd34 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e1       	ldi	r30, 0x12	; 18
      68:	f1 e1       	ldi	r31, 0x11	; 17
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 36       	cpi	r26, 0x6E	; 110
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	ae e6       	ldi	r26, 0x6E	; 110
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 38       	cpi	r26, 0x87	; 135
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <main>
      8a:	0c 94 87 08 	jmp	0x110e	; 0x110e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <IncreaseTemp>:

void IncreaseTemp()
{


	if(tempre_set<75 && TempSetCounter)
      92:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <tempre_set>
      96:	8b 34       	cpi	r24, 0x4B	; 75
      98:	48 f4       	brcc	.+18     	; 0xac <IncreaseTemp+0x1a>
      9a:	20 91 71 00 	lds	r18, 0x0071	; 0x800071 <TempSetCounter>
      9e:	30 91 72 00 	lds	r19, 0x0072	; 0x800072 <TempSetCounter+0x1>
      a2:	23 2b       	or	r18, r19
      a4:	19 f0       	breq	.+6      	; 0xac <IncreaseTemp+0x1a>
	{
		tempre_set += 5;
      a6:	8b 5f       	subi	r24, 0xFB	; 251
      a8:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <tempre_set>
	}
	TempSetCounter = OVFSTempSetCounts;
      ac:	81 e3       	ldi	r24, 0x31	; 49
      ae:	91 e0       	ldi	r25, 0x01	; 1
      b0:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <TempSetCounter+0x1>
      b4:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <TempSetCounter>
      b8:	08 95       	ret

000000ba <DecreaseTemp>:
}

void DecreaseTemp()
{

	if(tempre_set>35 && TempSetCounter)
      ba:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <tempre_set>
      be:	84 32       	cpi	r24, 0x24	; 36
      c0:	48 f0       	brcs	.+18     	; 0xd4 <DecreaseTemp+0x1a>
      c2:	20 91 71 00 	lds	r18, 0x0071	; 0x800071 <TempSetCounter>
      c6:	30 91 72 00 	lds	r19, 0x0072	; 0x800072 <TempSetCounter+0x1>
      ca:	23 2b       	or	r18, r19
      cc:	19 f0       	breq	.+6      	; 0xd4 <DecreaseTemp+0x1a>
	{
		tempre_set -= 5;
      ce:	85 50       	subi	r24, 0x05	; 5
      d0:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <tempre_set>
	}
	TempSetCounter = OVFSTempSetCounts;
      d4:	81 e3       	ldi	r24, 0x31	; 49
      d6:	91 e0       	ldi	r25, 0x01	; 1
      d8:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <TempSetCounter+0x1>
      dc:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <TempSetCounter>
      e0:	08 95       	ret

000000e2 <EXTI_ONOFFfun>:
Power Controller_PowerMood=OFF;

void EXTI_ONOFFfun()
{

	if(Controller_PowerMood == OFF)
      e2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
      e6:	81 30       	cpi	r24, 0x01	; 1
      e8:	71 f4       	brne	.+28     	; 0x106 <EXTI_ONOFFfun+0x24>
	{
		EXTI_enuEnableInterrupt(&EXTI_AstrEXTIConfig[0]);
      ea:	83 e6       	ldi	r24, 0x63	; 99
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	0e 94 3d 05 	call	0xa7a	; 0xa7a <EXTI_enuEnableInterrupt>
		EXTI_enuEnableInterrupt(&EXTI_AstrEXTIConfig[1]);
      f2:	86 e6       	ldi	r24, 0x66	; 102
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	0e 94 3d 05 	call	0xa7a	; 0xa7a <EXTI_enuEnableInterrupt>
		TIMER2_enuEnableInterrupt(TIM2_OVERFLOW_INTER);
      fa:	80 e4       	ldi	r24, 0x40	; 64
      fc:	0e 94 2f 06 	call	0xc5e	; 0xc5e <TIMER2_enuEnableInterrupt>
		Controller_PowerMood = ON;
     100:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
     104:	08 95       	ret
	}
	else
	{
		EXTI_enuDisableInterrupt(&EXTI_AstrEXTIConfig[0]);
     106:	83 e6       	ldi	r24, 0x63	; 99
     108:	90 e0       	ldi	r25, 0x00	; 0
     10a:	0e 94 5a 05 	call	0xab4	; 0xab4 <EXTI_enuDisableInterrupt>
		EXTI_enuDisableInterrupt(&EXTI_AstrEXTIConfig[1]);
     10e:	86 e6       	ldi	r24, 0x66	; 102
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	0e 94 5a 05 	call	0xab4	; 0xab4 <EXTI_enuDisableInterrupt>
		TIMER2_enuDisableInterrupt(TIM2_OVERFLOW_INTER);
     116:	80 e4       	ldi	r24, 0x40	; 64
     118:	0e 94 3b 06 	call	0xc76	; 0xc76 <TIMER2_enuDisableInterrupt>
		Controller_PowerMood = OFF;
     11c:	81 e0       	ldi	r24, 0x01	; 1
     11e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		S7SEG2_enuSendInteger(0);
     122:	80 e0       	ldi	r24, 0x00	; 0
     124:	0e 94 83 02 	call	0x506	; 0x506 <S7SEG2_enuSendInteger>
		DIO_enuSetPinValue(Heater_Pin,DIO_u8LOW);
     128:	40 e0       	ldi	r20, 0x00	; 0
     12a:	61 e0       	ldi	r22, 0x01	; 1
     12c:	80 e0       	ldi	r24, 0x00	; 0
     12e:	0e 94 65 03 	call	0x6ca	; 0x6ca <DIO_enuSetPinValue>
		DIO_enuSetPinValue(HeaterLed_Pin,DIO_u8LOW);
     132:	40 e0       	ldi	r20, 0x00	; 0
     134:	61 e0       	ldi	r22, 0x01	; 1
     136:	81 e0       	ldi	r24, 0x01	; 1
     138:	0e 94 65 03 	call	0x6ca	; 0x6ca <DIO_enuSetPinValue>
		DIO_enuSetPinValue(CoolantLed_Pin,DIO_u8LOW);
     13c:	40 e0       	ldi	r20, 0x00	; 0
     13e:	63 e0       	ldi	r22, 0x03	; 3
     140:	81 e0       	ldi	r24, 0x01	; 1
     142:	0e 94 65 03 	call	0x6ca	; 0x6ca <DIO_enuSetPinValue>
		DIO_enuSetPinValue(Coolant_Pin,DIO_u8LOW);
     146:	40 e0       	ldi	r20, 0x00	; 0
     148:	60 e0       	ldi	r22, 0x00	; 0
     14a:	81 e0       	ldi	r24, 0x01	; 1
     14c:	0e 94 65 03 	call	0x6ca	; 0x6ca <DIO_enuSetPinValue>
     150:	08 95       	ret

00000152 <Timerovfcounter>:
	TempSetCounter = OVFSTempSetCounts;
}

void Timerovfcounter()
{
	if(GlobalCounter)	GlobalCounter--;
     152:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <GlobalCounter>
     156:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <GlobalCounter+0x1>
     15a:	00 97       	sbiw	r24, 0x00	; 0
     15c:	29 f0       	breq	.+10     	; 0x168 <Timerovfcounter+0x16>
     15e:	01 97       	sbiw	r24, 0x01	; 1
     160:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <GlobalCounter+0x1>
     164:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <GlobalCounter>
	if(OneSecCounts)	OneSecCounts--;
     168:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <OneSecCounts>
     16c:	88 23       	and	r24, r24
     16e:	19 f0       	breq	.+6      	; 0x176 <Timerovfcounter+0x24>
     170:	81 50       	subi	r24, 0x01	; 1
     172:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <OneSecCounts>
	if(TempSetCounter)
     176:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <TempSetCounter>
     17a:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <TempSetCounter+0x1>
     17e:	00 97       	sbiw	r24, 0x00	; 0
     180:	71 f0       	breq	.+28     	; 0x19e <Timerovfcounter+0x4c>
	{
		TempSetCounter--;
     182:	01 97       	sbiw	r24, 0x01	; 1
     184:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <TempSetCounter+0x1>
     188:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <TempSetCounter>
		if(!TempSetCounter)
     18c:	89 2b       	or	r24, r25
     18e:	39 f4       	brne	.+14     	; 0x19e <Timerovfcounter+0x4c>
			EEPROM_write(TepretureADD,tempre_set);
     190:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <tempre_set>
     194:	70 e0       	ldi	r23, 0x00	; 0
     196:	80 e0       	ldi	r24, 0x00	; 0
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	0e 94 68 04 	call	0x8d0	; 0x8d0 <EEPROM_write>
     19e:	08 95       	ret

000001a0 <main>:




int main(void)
{
     1a0:	cf 93       	push	r28
     1a2:	df 93       	push	r29
     1a4:	cd b7       	in	r28, 0x3d	; 61
     1a6:	de b7       	in	r29, 0x3e	; 62
     1a8:	2e 97       	sbiw	r28, 0x0e	; 14
     1aa:	0f b6       	in	r0, 0x3f	; 63
     1ac:	f8 94       	cli
     1ae:	de bf       	out	0x3e, r29	; 62
     1b0:	0f be       	out	0x3f, r0	; 63
     1b2:	cd bf       	out	0x3d, r28	; 61

	u16 Current_Temp;
	S7SEG2_enuInit();
     1b4:	0e 94 7f 02 	call	0x4fe	; 0x4fe <S7SEG2_enuInit>
	EXTI_enuInit();
     1b8:	0e 94 80 04 	call	0x900	; 0x900 <EXTI_enuInit>
	EXTI_enuCallBack(&EXTI_AstrEXTIConfig[0],IncreaseTemp,NULL);
     1bc:	40 e0       	ldi	r20, 0x00	; 0
     1be:	50 e0       	ldi	r21, 0x00	; 0
     1c0:	69 e4       	ldi	r22, 0x49	; 73
     1c2:	70 e0       	ldi	r23, 0x00	; 0
     1c4:	83 e6       	ldi	r24, 0x63	; 99
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	0e 94 77 05 	call	0xaee	; 0xaee <EXTI_enuCallBack>
	EXTI_enuCallBack(&EXTI_AstrEXTIConfig[1],DecreaseTemp,NULL);
     1cc:	40 e0       	ldi	r20, 0x00	; 0
     1ce:	50 e0       	ldi	r21, 0x00	; 0
     1d0:	6d e5       	ldi	r22, 0x5D	; 93
     1d2:	70 e0       	ldi	r23, 0x00	; 0
     1d4:	86 e6       	ldi	r24, 0x66	; 102
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	0e 94 77 05 	call	0xaee	; 0xaee <EXTI_enuCallBack>
	EXTI_enuCallBack(&EXTI_AstrEXTIConfig[2],EXTI_ONOFFfun,NULL);
     1dc:	40 e0       	ldi	r20, 0x00	; 0
     1de:	50 e0       	ldi	r21, 0x00	; 0
     1e0:	61 e7       	ldi	r22, 0x71	; 113
     1e2:	70 e0       	ldi	r23, 0x00	; 0
     1e4:	89 e6       	ldi	r24, 0x69	; 105
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	0e 94 77 05 	call	0xaee	; 0xaee <EXTI_enuCallBack>
	DIO_enuSetPinDirection(UP_Button,DIO_u8INPUT);
     1ec:	40 e0       	ldi	r20, 0x00	; 0
     1ee:	62 e0       	ldi	r22, 0x02	; 2
     1f0:	83 e0       	ldi	r24, 0x03	; 3
     1f2:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DOWN_Button,DIO_u8INPUT);
     1f6:	40 e0       	ldi	r20, 0x00	; 0
     1f8:	63 e0       	ldi	r22, 0x03	; 3
     1fa:	83 e0       	ldi	r24, 0x03	; 3
     1fc:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(ONOFF_Button,DIO_u8INPUT);
     200:	40 e0       	ldi	r20, 0x00	; 0
     202:	62 e0       	ldi	r22, 0x02	; 2
     204:	81 e0       	ldi	r24, 0x01	; 1
     206:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <DIO_enuSetPinDirection>
	DIO_enuSetPinValue(UP_Button,DIO_u8HIGH);
     20a:	41 e0       	ldi	r20, 0x01	; 1
     20c:	62 e0       	ldi	r22, 0x02	; 2
     20e:	83 e0       	ldi	r24, 0x03	; 3
     210:	0e 94 65 03 	call	0x6ca	; 0x6ca <DIO_enuSetPinValue>
	DIO_enuSetPinValue(DOWN_Button,DIO_u8HIGH);
     214:	41 e0       	ldi	r20, 0x01	; 1
     216:	63 e0       	ldi	r22, 0x03	; 3
     218:	83 e0       	ldi	r24, 0x03	; 3
     21a:	0e 94 65 03 	call	0x6ca	; 0x6ca <DIO_enuSetPinValue>
	DIO_enuSetPinValue(ONOFF_Button,DIO_u8HIGH);
     21e:	41 e0       	ldi	r20, 0x01	; 1
     220:	62 e0       	ldi	r22, 0x02	; 2
     222:	81 e0       	ldi	r24, 0x01	; 1
     224:	0e 94 65 03 	call	0x6ca	; 0x6ca <DIO_enuSetPinValue>

	DIO_enuSetPinDirection(Heater_Pin,DIO_u8OUTPUT);
     228:	41 e0       	ldi	r20, 0x01	; 1
     22a:	61 e0       	ldi	r22, 0x01	; 1
     22c:	80 e0       	ldi	r24, 0x00	; 0
     22e:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(HeaterLed_Pin,DIO_u8OUTPUT);
     232:	41 e0       	ldi	r20, 0x01	; 1
     234:	61 e0       	ldi	r22, 0x01	; 1
     236:	81 e0       	ldi	r24, 0x01	; 1
     238:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <DIO_enuSetPinDirection>
	DIO_enuSetPinValue(Heater_Pin,DIO_u8LOW);
     23c:	40 e0       	ldi	r20, 0x00	; 0
     23e:	61 e0       	ldi	r22, 0x01	; 1
     240:	80 e0       	ldi	r24, 0x00	; 0
     242:	0e 94 65 03 	call	0x6ca	; 0x6ca <DIO_enuSetPinValue>
	DIO_enuSetPinValue(HeaterLed_Pin,DIO_u8LOW);
     246:	40 e0       	ldi	r20, 0x00	; 0
     248:	61 e0       	ldi	r22, 0x01	; 1
     24a:	81 e0       	ldi	r24, 0x01	; 1
     24c:	0e 94 65 03 	call	0x6ca	; 0x6ca <DIO_enuSetPinValue>

	DIO_enuSetPinDirection(Coolant_Pin,DIO_u8OUTPUT);
     250:	41 e0       	ldi	r20, 0x01	; 1
     252:	60 e0       	ldi	r22, 0x00	; 0
     254:	81 e0       	ldi	r24, 0x01	; 1
     256:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(CoolantLed_Pin,DIO_u8OUTPUT);
     25a:	41 e0       	ldi	r20, 0x01	; 1
     25c:	63 e0       	ldi	r22, 0x03	; 3
     25e:	81 e0       	ldi	r24, 0x01	; 1
     260:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <DIO_enuSetPinDirection>
	DIO_enuSetPinValue(CoolantLed_Pin,DIO_u8LOW);
     264:	40 e0       	ldi	r20, 0x00	; 0
     266:	63 e0       	ldi	r22, 0x03	; 3
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	0e 94 65 03 	call	0x6ca	; 0x6ca <DIO_enuSetPinValue>
	DIO_enuSetPinValue(Coolant_Pin,DIO_u8LOW);
     26e:	40 e0       	ldi	r20, 0x00	; 0
     270:	60 e0       	ldi	r22, 0x00	; 0
     272:	81 e0       	ldi	r24, 0x01	; 1
     274:	0e 94 65 03 	call	0x6ca	; 0x6ca <DIO_enuSetPinValue>

	TEMP_voidInit();
     278:	0e 94 2b 02 	call	0x456	; 0x456 <TEMP_voidInit>
	TEMP_u16GetValue(&Current_Temp);
     27c:	ce 01       	movw	r24, r28
     27e:	01 96       	adiw	r24, 0x01	; 1
     280:	0e 94 2f 02 	call	0x45e	; 0x45e <TEMP_u16GetValue>
	GIE_enuEnable();
     284:	0e 94 1e 06 	call	0xc3c	; 0xc3c <GIE_enuEnable>
	TIMER2_enuInit();
     288:	0e 94 21 06 	call	0xc42	; 0xc42 <TIMER2_enuInit>
	TIMER2_enuCallBackFun(TIM2_OVERFLOW_INTER,Timerovfcounter,NULL);
     28c:	40 e0       	ldi	r20, 0x00	; 0
     28e:	50 e0       	ldi	r21, 0x00	; 0
     290:	69 ea       	ldi	r22, 0xA9	; 169
     292:	70 e0       	ldi	r23, 0x00	; 0
     294:	80 e4       	ldi	r24, 0x40	; 64
     296:	0e 94 48 06 	call	0xc90	; 0xc90 <TIMER2_enuCallBackFun>
	TempSetCounter = 0;
     29a:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <TempSetCounter+0x1>
     29e:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <TempSetCounter>
	{
		u8 EpromRead;
		EEPROM_read(TepretureADD,&EpromRead);
     2a2:	be 01       	movw	r22, r28
     2a4:	63 5f       	subi	r22, 0xF3	; 243
     2a6:	7f 4f       	sbci	r23, 0xFF	; 255
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	0e 94 74 04 	call	0x8e8	; 0x8e8 <EEPROM_read>
		if(EpromRead!=0XFF)		tempre_set=EpromRead;
     2b0:	8d 85       	ldd	r24, Y+13	; 0x0d
     2b2:	8f 3f       	cpi	r24, 0xFF	; 255
     2b4:	11 f0       	breq	.+4      	; 0x2ba <main+0x11a>
     2b6:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <tempre_set>
	}

	u8 TempArray[10]={Current_Temp,Current_Temp,Current_Temp,Current_Temp,Current_Temp,Current_Temp,Current_Temp,Current_Temp,Current_Temp,Current_Temp};
     2ba:	89 81       	ldd	r24, Y+1	; 0x01
     2bc:	8b 83       	std	Y+3, r24	; 0x03
     2be:	8c 83       	std	Y+4, r24	; 0x04
     2c0:	8d 83       	std	Y+5, r24	; 0x05
     2c2:	8e 83       	std	Y+6, r24	; 0x06
     2c4:	8f 83       	std	Y+7, r24	; 0x07
     2c6:	88 87       	std	Y+8, r24	; 0x08
     2c8:	89 87       	std	Y+9, r24	; 0x09
     2ca:	8a 87       	std	Y+10, r24	; 0x0a
     2cc:	8b 87       	std	Y+11, r24	; 0x0b
     2ce:	8c 87       	std	Y+12, r24	; 0x0c
	Controller_PowerMood=OFF;
     2d0:	81 e0       	ldi	r24, 0x01	; 1
     2d2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	EXTI_enuDisableInterrupt(&EXTI_AstrEXTIConfig[0]);
     2d6:	83 e6       	ldi	r24, 0x63	; 99
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	0e 94 5a 05 	call	0xab4	; 0xab4 <EXTI_enuDisableInterrupt>
	EXTI_enuDisableInterrupt(&EXTI_AstrEXTIConfig[1]);
     2de:	86 e6       	ldi	r24, 0x66	; 102
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	0e 94 5a 05 	call	0xab4	; 0xab4 <EXTI_enuDisableInterrupt>
	TIMER2_enuDisableInterrupt(TIM2_OVERFLOW_INTER);
     2e6:	80 e4       	ldi	r24, 0x40	; 64
     2e8:	0e 94 3b 06 	call	0xc76	; 0xc76 <TIMER2_enuDisableInterrupt>
	while(1)
	{
		while(Controller_PowerMood == OFF);
     2ec:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     2f0:	81 30       	cpi	r24, 0x01	; 1
     2f2:	e1 f3       	breq	.-8      	; 0x2ec <main+0x14c>


		if(TempSetCounter)		S7SEG2_enuSendInteger(tempre_set);
     2f4:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <TempSetCounter>
     2f8:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <TempSetCounter+0x1>
     2fc:	89 2b       	or	r24, r25
     2fe:	29 f0       	breq	.+10     	; 0x30a <main+0x16a>
     300:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <tempre_set>
     304:	0e 94 83 02 	call	0x506	; 0x506 <S7SEG2_enuSendInteger>
     308:	03 c0       	rjmp	.+6      	; 0x310 <main+0x170>
		else			S7SEG2_enuSendInteger(Current_Temp);
     30a:	89 81       	ldd	r24, Y+1	; 0x01
     30c:	0e 94 83 02 	call	0x506	; 0x506 <S7SEG2_enuSendInteger>
		if(!GlobalCounter)
     310:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <GlobalCounter>
     314:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <GlobalCounter+0x1>
     318:	89 2b       	or	r24, r25
     31a:	f1 f4       	brne	.+60     	; 0x358 <main+0x1b8>
		{
			GlobalCounter=TempReadCounts;
     31c:	86 e0       	ldi	r24, 0x06	; 6
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <GlobalCounter+0x1>
     324:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <GlobalCounter>
			static u8 TempIndex=0;
			TEMP_u16GetValue(&Current_Temp);
     328:	ce 01       	movw	r24, r28
     32a:	01 96       	adiw	r24, 0x01	; 1
     32c:	0e 94 2f 02 	call	0x45e	; 0x45e <TEMP_u16GetValue>
			if(TempIndex == 10 )
     330:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
     334:	8a 30       	cpi	r24, 0x0A	; 10
     336:	11 f4       	brne	.+4      	; 0x33c <main+0x19c>
				TempIndex = 0;
     338:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__data_end>
			TempArray[TempIndex++] =  Current_Temp;
     33c:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
     340:	91 e0       	ldi	r25, 0x01	; 1
     342:	98 0f       	add	r25, r24
     344:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <__data_end>
     348:	e3 e0       	ldi	r30, 0x03	; 3
     34a:	f0 e0       	ldi	r31, 0x00	; 0
     34c:	ec 0f       	add	r30, r28
     34e:	fd 1f       	adc	r31, r29
     350:	e8 0f       	add	r30, r24
     352:	f1 1d       	adc	r31, r1
     354:	89 81       	ldd	r24, Y+1	; 0x01
     356:	80 83       	st	Z, r24

		}
		u16 TempAvarage=(TempArray[0]+TempArray[1]+TempArray[2]+TempArray[3]+TempArray[4]+TempArray[5]+TempArray[6]+TempArray[7]+TempArray[8]+TempArray[9])/10;
     358:	2b 81       	ldd	r18, Y+3	; 0x03
     35a:	8c 81       	ldd	r24, Y+4	; 0x04
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	82 0f       	add	r24, r18
     360:	91 1d       	adc	r25, r1
     362:	2d 81       	ldd	r18, Y+5	; 0x05
     364:	82 0f       	add	r24, r18
     366:	91 1d       	adc	r25, r1
     368:	2e 81       	ldd	r18, Y+6	; 0x06
     36a:	82 0f       	add	r24, r18
     36c:	91 1d       	adc	r25, r1
     36e:	2f 81       	ldd	r18, Y+7	; 0x07
     370:	82 0f       	add	r24, r18
     372:	91 1d       	adc	r25, r1
     374:	28 85       	ldd	r18, Y+8	; 0x08
     376:	82 0f       	add	r24, r18
     378:	91 1d       	adc	r25, r1
     37a:	29 85       	ldd	r18, Y+9	; 0x09
     37c:	82 0f       	add	r24, r18
     37e:	91 1d       	adc	r25, r1
     380:	2a 85       	ldd	r18, Y+10	; 0x0a
     382:	82 0f       	add	r24, r18
     384:	91 1d       	adc	r25, r1
     386:	2b 85       	ldd	r18, Y+11	; 0x0b
     388:	82 0f       	add	r24, r18
     38a:	91 1d       	adc	r25, r1
     38c:	2c 85       	ldd	r18, Y+12	; 0x0c
     38e:	82 0f       	add	r24, r18
     390:	91 1d       	adc	r25, r1
     392:	6a e0       	ldi	r22, 0x0A	; 10
     394:	70 e0       	ldi	r23, 0x00	; 0
     396:	0e 94 f7 07 	call	0xfee	; 0xfee <__divmodhi4>
     39a:	8b 01       	movw	r16, r22
		//*((volatile u8*)0X3F)=TempAvarage;
		u8 Coolerpinstate;
		DIO_enuGetPinValue(Coolant_Pin,&Coolerpinstate);
     39c:	ae 01       	movw	r20, r28
     39e:	42 5f       	subi	r20, 0xF2	; 242
     3a0:	5f 4f       	sbci	r21, 0xFF	; 255
     3a2:	60 e0       	ldi	r22, 0x00	; 0
     3a4:	81 e0       	ldi	r24, 0x01	; 1
     3a6:	0e 94 21 04 	call	0x842	; 0x842 <DIO_enuGetPinValue>
		u8 Heaterpinstate;
		DIO_enuGetPinValue(Heater_Pin,&Heaterpinstate);
     3aa:	ae 01       	movw	r20, r28
     3ac:	43 5f       	subi	r20, 0xF3	; 243
     3ae:	5f 4f       	sbci	r21, 0xFF	; 255
     3b0:	61 e0       	ldi	r22, 0x01	; 1
     3b2:	80 e0       	ldi	r24, 0x00	; 0
     3b4:	0e 94 21 04 	call	0x842	; 0x842 <DIO_enuGetPinValue>

		if(TempAvarage < (tempre_set-5))
     3b8:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <tempre_set>
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	9c 01       	movw	r18, r24
     3c0:	25 50       	subi	r18, 0x05	; 5
     3c2:	31 09       	sbc	r19, r1
     3c4:	02 17       	cp	r16, r18
     3c6:	13 07       	cpc	r17, r19
     3c8:	98 f4       	brcc	.+38     	; 0x3f0 <main+0x250>
		{

			if(Heaterpinstate!=DIO_u8HIGH)
     3ca:	8d 85       	ldd	r24, Y+13	; 0x0d
     3cc:	81 30       	cpi	r24, 0x01	; 1
     3ce:	31 f1       	breq	.+76     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
			{
				DIO_enuSetPinValue(Heater_Pin,DIO_u8HIGH);
     3d0:	41 e0       	ldi	r20, 0x01	; 1
     3d2:	61 e0       	ldi	r22, 0x01	; 1
     3d4:	80 e0       	ldi	r24, 0x00	; 0
     3d6:	0e 94 65 03 	call	0x6ca	; 0x6ca <DIO_enuSetPinValue>
				DIO_enuSetPinValue(Coolant_Pin,DIO_u8LOW);
     3da:	40 e0       	ldi	r20, 0x00	; 0
     3dc:	60 e0       	ldi	r22, 0x00	; 0
     3de:	81 e0       	ldi	r24, 0x01	; 1
     3e0:	0e 94 65 03 	call	0x6ca	; 0x6ca <DIO_enuSetPinValue>
				DIO_enuSetPinValue(CoolantLed_Pin,DIO_u8LOW);
     3e4:	40 e0       	ldi	r20, 0x00	; 0
     3e6:	63 e0       	ldi	r22, 0x03	; 3
     3e8:	81 e0       	ldi	r24, 0x01	; 1
     3ea:	0e 94 65 03 	call	0x6ca	; 0x6ca <DIO_enuSetPinValue>
     3ee:	16 c0       	rjmp	.+44     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>

			}


		}
		else if( TempAvarage > ( tempre_set+5))
     3f0:	05 96       	adiw	r24, 0x05	; 5
     3f2:	80 17       	cp	r24, r16
     3f4:	91 07       	cpc	r25, r17
     3f6:	90 f4       	brcc	.+36     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
		{

			if(Coolerpinstate!=DIO_u8HIGH)
     3f8:	8e 85       	ldd	r24, Y+14	; 0x0e
     3fa:	81 30       	cpi	r24, 0x01	; 1
     3fc:	79 f0       	breq	.+30     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
			{
				DIO_enuSetPinValue(Heater_Pin,DIO_u8LOW);
     3fe:	40 e0       	ldi	r20, 0x00	; 0
     400:	61 e0       	ldi	r22, 0x01	; 1
     402:	80 e0       	ldi	r24, 0x00	; 0
     404:	0e 94 65 03 	call	0x6ca	; 0x6ca <DIO_enuSetPinValue>
				DIO_enuSetPinValue(Coolant_Pin,DIO_u8HIGH);
     408:	41 e0       	ldi	r20, 0x01	; 1
     40a:	60 e0       	ldi	r22, 0x00	; 0
     40c:	81 e0       	ldi	r24, 0x01	; 1
     40e:	0e 94 65 03 	call	0x6ca	; 0x6ca <DIO_enuSetPinValue>
				DIO_enuSetPinValue(HeaterLed_Pin,DIO_u8LOW);
     412:	40 e0       	ldi	r20, 0x00	; 0
     414:	61 e0       	ldi	r22, 0x01	; 1
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	0e 94 65 03 	call	0x6ca	; 0x6ca <DIO_enuSetPinValue>
			}

		}
		if(!(OneSecCounts)&& Coolerpinstate==DIO_u8HIGH)
     41c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <OneSecCounts>
     420:	81 11       	cpse	r24, r1
     422:	0b c0       	rjmp	.+22     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
     424:	9e 85       	ldd	r25, Y+14	; 0x0e
     426:	91 30       	cpi	r25, 0x01	; 1
     428:	41 f4       	brne	.+16     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
		{
			OneSecCounts = One_secound;
     42a:	8d e3       	ldi	r24, 0x3D	; 61
     42c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <OneSecCounts>
			DIO_enuTogglePinValue(CoolantLed_Pin);
     430:	63 e0       	ldi	r22, 0x03	; 3
     432:	81 e0       	ldi	r24, 0x01	; 1
     434:	0e 94 df 03 	call	0x7be	; 0x7be <DIO_enuTogglePinValue>
     438:	59 cf       	rjmp	.-334    	; 0x2ec <main+0x14c>
		}
		else if(!(OneSecCounts)&&Heaterpinstate==DIO_u8HIGH)
     43a:	81 11       	cpse	r24, r1
     43c:	57 cf       	rjmp	.-338    	; 0x2ec <main+0x14c>
     43e:	8d 85       	ldd	r24, Y+13	; 0x0d
     440:	81 30       	cpi	r24, 0x01	; 1
     442:	09 f0       	breq	.+2      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
     444:	53 cf       	rjmp	.-346    	; 0x2ec <main+0x14c>
		{
			OneSecCounts = One_secound;
     446:	8d e3       	ldi	r24, 0x3D	; 61
     448:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <OneSecCounts>
			DIO_enuTogglePinValue(HeaterLed_Pin);
     44c:	61 e0       	ldi	r22, 0x01	; 1
     44e:	81 e0       	ldi	r24, 0x01	; 1
     450:	0e 94 df 03 	call	0x7be	; 0x7be <DIO_enuTogglePinValue>
		}


	}
     454:	4b cf       	rjmp	.-362    	; 0x2ec <main+0x14c>

00000456 <TEMP_voidInit>:
#include "Temp_sensor_priv.h"

ES_t TEMP_voidInit(void)
{
	ES_t Local_ennErrorState=ES_NOK;
	ADC_enuInit();
     456:	0e 94 a9 02 	call	0x552	; 0x552 <ADC_enuInit>

	Local_ennErrorState=ES_OK;


	return Local_ennErrorState;
}
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	08 95       	ret

0000045e <TEMP_u16GetValue>:


ES_t TEMP_u16GetValue(u16*Copy_pu16tempvalue)
{
     45e:	8f 92       	push	r8
     460:	9f 92       	push	r9
     462:	af 92       	push	r10
     464:	bf 92       	push	r11
     466:	cf 92       	push	r12
     468:	df 92       	push	r13
     46a:	ef 92       	push	r14
     46c:	ff 92       	push	r15
     46e:	0f 93       	push	r16
     470:	1f 93       	push	r17
     472:	cf 93       	push	r28
     474:	df 93       	push	r29
     476:	00 d0       	rcall	.+0      	; 0x478 <TEMP_u16GetValue+0x1a>
     478:	cd b7       	in	r28, 0x3d	; 61
     47a:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_ennErrorState=ES_NOK;

	if (NULL!=Copy_pu16tempvalue )
     47c:	00 97       	sbiw	r24, 0x00	; 0
     47e:	79 f1       	breq	.+94     	; 0x4de <TEMP_u16GetValue+0x80>
     480:	4c 01       	movw	r8, r24
	{
		u16 Local_u16Analogve;

		ADC_enuStartConversion();
     482:	0e 94 c0 02 	call	0x580	; 0x580 <ADC_enuStartConversion>
		ADC_enuPollingRead(&Local_u16Analogve);
     486:	ce 01       	movw	r24, r28
     488:	01 96       	adiw	r24, 0x01	; 1
     48a:	0e 94 c5 02 	call	0x58a	; 0x58a <ADC_enuPollingRead>
		*Copy_pu16tempvalue=((u64)Local_u16Analogve*150*5)/((u64)1023*1.5);
     48e:	49 81       	ldd	r20, Y+1	; 0x01
     490:	5a 81       	ldd	r21, Y+2	; 0x02
     492:	0f 2e       	mov	r0, r31
     494:	fe ee       	ldi	r31, 0xEE	; 238
     496:	af 2e       	mov	r10, r31
     498:	f0 2d       	mov	r31, r0
     49a:	68 94       	set
     49c:	bb 24       	eor	r11, r11
     49e:	b1 f8       	bld	r11, 1
     4a0:	c1 2c       	mov	r12, r1
     4a2:	d1 2c       	mov	r13, r1
     4a4:	e1 2c       	mov	r14, r1
     4a6:	f1 2c       	mov	r15, r1
     4a8:	00 e0       	ldi	r16, 0x00	; 0
     4aa:	10 e0       	ldi	r17, 0x00	; 0
     4ac:	24 2f       	mov	r18, r20
     4ae:	35 2f       	mov	r19, r21
     4b0:	40 e0       	ldi	r20, 0x00	; 0
     4b2:	50 e0       	ldi	r21, 0x00	; 0
     4b4:	60 e0       	ldi	r22, 0x00	; 0
     4b6:	70 e0       	ldi	r23, 0x00	; 0
     4b8:	80 e0       	ldi	r24, 0x00	; 0
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	0e 94 0b 08 	call	0x1016	; 0x1016 <__muldi3>
     4c0:	0e 94 68 07 	call	0xed0	; 0xed0 <__floatundisf>
     4c4:	20 e0       	ldi	r18, 0x00	; 0
     4c6:	30 ed       	ldi	r19, 0xD0	; 208
     4c8:	4f eb       	ldi	r20, 0xBF	; 191
     4ca:	54 e4       	ldi	r21, 0x44	; 68
     4cc:	0e 94 c7 06 	call	0xd8e	; 0xd8e <__divsf3>
     4d0:	0e 94 39 07 	call	0xe72	; 0xe72 <__fixunssfsi>
     4d4:	f4 01       	movw	r30, r8
     4d6:	71 83       	std	Z+1, r23	; 0x01
     4d8:	60 83       	st	Z, r22

		Local_ennErrorState=ES_OK;
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	01 c0       	rjmp	.+2      	; 0x4e0 <TEMP_u16GetValue+0x82>


	}
	else
	{
		Local_ennErrorState=ES_NULL_POINTER;
     4de:	83 e0       	ldi	r24, 0x03	; 3

	}
	return Local_ennErrorState;
}
     4e0:	0f 90       	pop	r0
     4e2:	0f 90       	pop	r0
     4e4:	df 91       	pop	r29
     4e6:	cf 91       	pop	r28
     4e8:	1f 91       	pop	r17
     4ea:	0f 91       	pop	r16
     4ec:	ff 90       	pop	r15
     4ee:	ef 90       	pop	r14
     4f0:	df 90       	pop	r13
     4f2:	cf 90       	pop	r12
     4f4:	bf 90       	pop	r11
     4f6:	af 90       	pop	r10
     4f8:	9f 90       	pop	r9
     4fa:	8f 90       	pop	r8
     4fc:	08 95       	ret

000004fe <S7SEG2_enuInit>:
#include "two_7SEG_config.h"
ES_t S7SEG2_enuInit(void)
{
	ES_t Local_enuErrorState= ES_NOK;

	Group_dir = DIO_u8GROUPOUTPUT;
     4fe:	8f ef       	ldi	r24, 0xFF	; 255
     500:	84 bb       	out	0x14, r24	; 20
	Local_enuErrorState = ES_OK;

	return Local_enuErrorState;

}
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	08 95       	ret

00000506 <S7SEG2_enuSendInteger>:

ES_t S7SEG2_enuSendInteger(u8 Copy_u8Integer)
{
	ES_t Local_enuErrorState= ES_NOK;
	if(Copy_u8Integer<=99)
     506:	84 36       	cpi	r24, 0x64	; 100
     508:	10 f5       	brcc	.+68     	; 0x54e <S7SEG2_enuSendInteger+0x48>
	{
		Group = (Copy_u8Integer % 10)|(((Copy_u8Integer/10)%10)<<4);
     50a:	9d ec       	ldi	r25, 0xCD	; 205
     50c:	89 9f       	mul	r24, r25
     50e:	21 2d       	mov	r18, r1
     510:	11 24       	eor	r1, r1
     512:	26 95       	lsr	r18
     514:	26 95       	lsr	r18
     516:	26 95       	lsr	r18
     518:	29 9f       	mul	r18, r25
     51a:	91 2d       	mov	r25, r1
     51c:	11 24       	eor	r1, r1
     51e:	96 95       	lsr	r25
     520:	96 95       	lsr	r25
     522:	96 95       	lsr	r25
     524:	99 0f       	add	r25, r25
     526:	39 2f       	mov	r19, r25
     528:	33 0f       	add	r19, r19
     52a:	33 0f       	add	r19, r19
     52c:	93 0f       	add	r25, r19
     52e:	42 2f       	mov	r20, r18
     530:	49 1b       	sub	r20, r25
     532:	90 e1       	ldi	r25, 0x10	; 16
     534:	49 9f       	mul	r20, r25
     536:	a0 01       	movw	r20, r0
     538:	11 24       	eor	r1, r1
     53a:	22 0f       	add	r18, r18
     53c:	92 2f       	mov	r25, r18
     53e:	99 0f       	add	r25, r25
     540:	99 0f       	add	r25, r25
     542:	29 0f       	add	r18, r25
     544:	82 1b       	sub	r24, r18
     546:	84 2b       	or	r24, r20
     548:	85 bb       	out	0x15, r24	; 21
		Local_enuErrorState=ES_OK;
     54a:	80 e0       	ldi	r24, 0x00	; 0
     54c:	08 95       	ret

}

ES_t S7SEG2_enuSendInteger(u8 Copy_u8Integer)
{
	ES_t Local_enuErrorState= ES_NOK;
     54e:	81 e0       	ldi	r24, 0x01	; 1

	}

	return Local_enuErrorState;

}
     550:	08 95       	ret

00000552 <ADC_enuInit>:
	while(!(((ADCSRA)>>4)&1));
	if(((ADMUX>>5)&1)==LEFT_ADJ)	* Copy_pu16Value = (ADCL>>6)|((u16)ADCH<<2);
	else * Copy_pu16Value = ADCL | ((u16)ADCH<<8);
	Local_enuErrorState = ES_OK ;
	return  Local_enuErrorState ;
}
     552:	17 b8       	out	0x07, r1	; 7
     554:	87 b1       	in	r24, 0x07	; 7
     556:	80 64       	ori	r24, 0x40	; 64
     558:	87 b9       	out	0x07, r24	; 7
     55a:	87 b1       	in	r24, 0x07	; 7
     55c:	80 62       	ori	r24, 0x20	; 32
     55e:	87 b9       	out	0x07, r24	; 7
     560:	87 b1       	in	r24, 0x07	; 7
     562:	87 b9       	out	0x07, r24	; 7
     564:	16 b8       	out	0x06, r1	; 6
     566:	86 b1       	in	r24, 0x06	; 6
     568:	8f 7d       	andi	r24, 0xDF	; 223
     56a:	86 b9       	out	0x06, r24	; 6
     56c:	86 b1       	in	r24, 0x06	; 6
     56e:	86 b9       	out	0x06, r24	; 6
     570:	86 b1       	in	r24, 0x06	; 6
     572:	87 60       	ori	r24, 0x07	; 7
     574:	86 b9       	out	0x06, r24	; 6
     576:	86 b1       	in	r24, 0x06	; 6
     578:	80 68       	ori	r24, 0x80	; 128
     57a:	86 b9       	out	0x06, r24	; 6
     57c:	80 e0       	ldi	r24, 0x00	; 0
     57e:	08 95       	ret

00000580 <ADC_enuStartConversion>:
     580:	86 b1       	in	r24, 0x06	; 6
     582:	80 64       	ori	r24, 0x40	; 64
     584:	86 b9       	out	0x06, r24	; 6
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	08 95       	ret

0000058a <ADC_enuPollingRead>:

ES_t ADC_enuPollingRead(u16 * Copy_pu16ADCValue)
{
	ES_t Local_enuErrorState = ES_NOK ;
	if (Copy_pu16ADCValue==NULL)	return ES_NULL_POINTER;
     58a:	00 97       	sbiw	r24, 0x00	; 0
     58c:	11 f1       	breq	.+68     	; 0x5d2 <ADC_enuPollingRead+0x48>
	while(!((ADCSRA>>4)&1));
     58e:	34 9b       	sbis	0x06, 4	; 6
     590:	fe cf       	rjmp	.-4      	; 0x58e <ADC_enuPollingRead+0x4>
	if(((ADMUX>>5)&1)==LEFT_ADJ)
     592:	3d 9b       	sbis	0x07, 5	; 7
     594:	10 c0       	rjmp	.+32     	; 0x5b6 <ADC_enuPollingRead+0x2c>
	{

		* Copy_pu16ADCValue = (ADCL>>6)|((u16)ADCH<<2);
     596:	44 b1       	in	r20, 0x04	; 4
     598:	42 95       	swap	r20
     59a:	46 95       	lsr	r20
     59c:	46 95       	lsr	r20
     59e:	43 70       	andi	r20, 0x03	; 3
     5a0:	25 b1       	in	r18, 0x05	; 5
     5a2:	30 e0       	ldi	r19, 0x00	; 0
     5a4:	22 0f       	add	r18, r18
     5a6:	33 1f       	adc	r19, r19
     5a8:	22 0f       	add	r18, r18
     5aa:	33 1f       	adc	r19, r19
     5ac:	24 2b       	or	r18, r20
     5ae:	fc 01       	movw	r30, r24
     5b0:	31 83       	std	Z+1, r19	; 0x01
     5b2:	20 83       	st	Z, r18
     5b4:	09 c0       	rjmp	.+18     	; 0x5c8 <ADC_enuPollingRead+0x3e>
	}
	else
	{
		* Copy_pu16ADCValue = ADCL | ((u16)ADCH<<8);
     5b6:	44 b1       	in	r20, 0x04	; 4
     5b8:	25 b1       	in	r18, 0x05	; 5
     5ba:	30 e0       	ldi	r19, 0x00	; 0
     5bc:	32 2f       	mov	r19, r18
     5be:	22 27       	eor	r18, r18
     5c0:	24 2b       	or	r18, r20
     5c2:	fc 01       	movw	r30, r24
     5c4:	31 83       	std	Z+1, r19	; 0x01
     5c6:	20 83       	st	Z, r18
	}
	ADCSRA |= (1<<4);
     5c8:	86 b1       	in	r24, 0x06	; 6
     5ca:	80 61       	ori	r24, 0x10	; 16
     5cc:	86 b9       	out	0x06, r24	; 6
	Local_enuErrorState = ES_OK ;

	return  Local_enuErrorState ;
     5ce:	80 e0       	ldi	r24, 0x00	; 0
     5d0:	08 95       	ret
}

ES_t ADC_enuPollingRead(u16 * Copy_pu16ADCValue)
{
	ES_t Local_enuErrorState = ES_NOK ;
	if (Copy_pu16ADCValue==NULL)	return ES_NULL_POINTER;
     5d2:	83 e0       	ldi	r24, 0x03	; 3
	}
	ADCSRA |= (1<<4);
	Local_enuErrorState = ES_OK ;

	return  Local_enuErrorState ;
}
     5d4:	08 95       	ret

000005d6 <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8GroupID, u8 Copy_u8PinID, u8 Copy_u8Direction)
{
	ES_t Local_enuErrorState = ES_NOK;

	if (Copy_u8GroupID <= DIO_u8GROUP_D &&
     5d6:	84 30       	cpi	r24, 0x04	; 4
     5d8:	08 f0       	brcs	.+2      	; 0x5dc <DIO_enuSetPinDirection+0x6>
     5da:	6f c0       	rjmp	.+222    	; 0x6ba <DIO_enuSetPinDirection+0xe4>
     5dc:	68 30       	cpi	r22, 0x08	; 8
     5de:	08 f0       	brcs	.+2      	; 0x5e2 <DIO_enuSetPinDirection+0xc>
     5e0:	6e c0       	rjmp	.+220    	; 0x6be <DIO_enuSetPinDirection+0xe8>
			Copy_u8PinID<= DIO_u8PIN7 &&
     5e2:	42 30       	cpi	r20, 0x02	; 2
     5e4:	08 f0       	brcs	.+2      	; 0x5e8 <DIO_enuSetPinDirection+0x12>
     5e6:	6d c0       	rjmp	.+218    	; 0x6c2 <DIO_enuSetPinDirection+0xec>
			Copy_u8Direction <= DIO_u8OUTPUT)
	{
		switch (Copy_u8GroupID)
     5e8:	81 30       	cpi	r24, 0x01	; 1
     5ea:	f9 f0       	breq	.+62     	; 0x62a <DIO_enuSetPinDirection+0x54>
     5ec:	30 f0       	brcs	.+12     	; 0x5fa <DIO_enuSetPinDirection+0x24>
     5ee:	82 30       	cpi	r24, 0x02	; 2
     5f0:	a1 f1       	breq	.+104    	; 0x65a <DIO_enuSetPinDirection+0x84>
     5f2:	83 30       	cpi	r24, 0x03	; 3
     5f4:	09 f4       	brne	.+2      	; 0x5f8 <DIO_enuSetPinDirection+0x22>
     5f6:	49 c0       	rjmp	.+146    	; 0x68a <DIO_enuSetPinDirection+0xb4>
     5f8:	66 c0       	rjmp	.+204    	; 0x6c6 <DIO_enuSetPinDirection+0xf0>
		{
		case DIO_u8GROUP_A:
			DDRA &= ~(DIO_BIT_MASK << Copy_u8PinID);
     5fa:	2a b3       	in	r18, 0x1a	; 26
     5fc:	81 e0       	ldi	r24, 0x01	; 1
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	06 2e       	mov	r0, r22
     602:	02 c0       	rjmp	.+4      	; 0x608 <DIO_enuSetPinDirection+0x32>
     604:	88 0f       	add	r24, r24
     606:	99 1f       	adc	r25, r25
     608:	0a 94       	dec	r0
     60a:	e2 f7       	brpl	.-8      	; 0x604 <DIO_enuSetPinDirection+0x2e>
     60c:	80 95       	com	r24
     60e:	82 23       	and	r24, r18
     610:	8a bb       	out	0x1a, r24	; 26
			DDRA |=  (Copy_u8Direction << Copy_u8PinID);
     612:	2a b3       	in	r18, 0x1a	; 26
     614:	84 2f       	mov	r24, r20
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	02 c0       	rjmp	.+4      	; 0x61e <DIO_enuSetPinDirection+0x48>
     61a:	88 0f       	add	r24, r24
     61c:	99 1f       	adc	r25, r25
     61e:	6a 95       	dec	r22
     620:	e2 f7       	brpl	.-8      	; 0x61a <DIO_enuSetPinDirection+0x44>
     622:	82 2b       	or	r24, r18
     624:	8a bb       	out	0x1a, r24	; 26

			break;

		}

		Local_enuErrorState = ES_OK;
     626:	80 e0       	ldi	r24, 0x00	; 0
		switch (Copy_u8GroupID)
		{
		case DIO_u8GROUP_A:
			DDRA &= ~(DIO_BIT_MASK << Copy_u8PinID);
			DDRA |=  (Copy_u8Direction << Copy_u8PinID);
			break;
     628:	08 95       	ret

		case DIO_u8GROUP_B:
			DDRB &= ~(DIO_BIT_MASK << Copy_u8PinID);
     62a:	87 b3       	in	r24, 0x17	; 23
     62c:	21 e0       	ldi	r18, 0x01	; 1
     62e:	30 e0       	ldi	r19, 0x00	; 0
     630:	06 2e       	mov	r0, r22
     632:	02 c0       	rjmp	.+4      	; 0x638 <DIO_enuSetPinDirection+0x62>
     634:	22 0f       	add	r18, r18
     636:	33 1f       	adc	r19, r19
     638:	0a 94       	dec	r0
     63a:	e2 f7       	brpl	.-8      	; 0x634 <DIO_enuSetPinDirection+0x5e>
     63c:	20 95       	com	r18
     63e:	28 23       	and	r18, r24
     640:	27 bb       	out	0x17, r18	; 23
			DDRB |=  (Copy_u8Direction << Copy_u8PinID);
     642:	27 b3       	in	r18, 0x17	; 23
     644:	84 2f       	mov	r24, r20
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	02 c0       	rjmp	.+4      	; 0x64e <DIO_enuSetPinDirection+0x78>
     64a:	88 0f       	add	r24, r24
     64c:	99 1f       	adc	r25, r25
     64e:	6a 95       	dec	r22
     650:	e2 f7       	brpl	.-8      	; 0x64a <DIO_enuSetPinDirection+0x74>
     652:	82 2b       	or	r24, r18
     654:	87 bb       	out	0x17, r24	; 23

			break;

		}

		Local_enuErrorState = ES_OK;
     656:	80 e0       	ldi	r24, 0x00	; 0

		case DIO_u8GROUP_B:
			DDRB &= ~(DIO_BIT_MASK << Copy_u8PinID);
			DDRB |=  (Copy_u8Direction << Copy_u8PinID);

			break;
     658:	08 95       	ret

		case DIO_u8GROUP_C:
			DDRC &= ~(DIO_BIT_MASK << Copy_u8PinID);
     65a:	84 b3       	in	r24, 0x14	; 20
     65c:	21 e0       	ldi	r18, 0x01	; 1
     65e:	30 e0       	ldi	r19, 0x00	; 0
     660:	06 2e       	mov	r0, r22
     662:	02 c0       	rjmp	.+4      	; 0x668 <DIO_enuSetPinDirection+0x92>
     664:	22 0f       	add	r18, r18
     666:	33 1f       	adc	r19, r19
     668:	0a 94       	dec	r0
     66a:	e2 f7       	brpl	.-8      	; 0x664 <DIO_enuSetPinDirection+0x8e>
     66c:	20 95       	com	r18
     66e:	28 23       	and	r18, r24
     670:	24 bb       	out	0x14, r18	; 20
			DDRC |=  (Copy_u8Direction << Copy_u8PinID);
     672:	24 b3       	in	r18, 0x14	; 20
     674:	84 2f       	mov	r24, r20
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	02 c0       	rjmp	.+4      	; 0x67e <DIO_enuSetPinDirection+0xa8>
     67a:	88 0f       	add	r24, r24
     67c:	99 1f       	adc	r25, r25
     67e:	6a 95       	dec	r22
     680:	e2 f7       	brpl	.-8      	; 0x67a <DIO_enuSetPinDirection+0xa4>
     682:	82 2b       	or	r24, r18
     684:	84 bb       	out	0x14, r24	; 20

			break;

		}

		Local_enuErrorState = ES_OK;
     686:	80 e0       	ldi	r24, 0x00	; 0

		case DIO_u8GROUP_C:
			DDRC &= ~(DIO_BIT_MASK << Copy_u8PinID);
			DDRC |=  (Copy_u8Direction << Copy_u8PinID);

			break;
     688:	08 95       	ret

		case DIO_u8GROUP_D:
			DDRD &= ~(DIO_BIT_MASK << Copy_u8PinID);
     68a:	81 b3       	in	r24, 0x11	; 17
     68c:	21 e0       	ldi	r18, 0x01	; 1
     68e:	30 e0       	ldi	r19, 0x00	; 0
     690:	06 2e       	mov	r0, r22
     692:	02 c0       	rjmp	.+4      	; 0x698 <DIO_enuSetPinDirection+0xc2>
     694:	22 0f       	add	r18, r18
     696:	33 1f       	adc	r19, r19
     698:	0a 94       	dec	r0
     69a:	e2 f7       	brpl	.-8      	; 0x694 <DIO_enuSetPinDirection+0xbe>
     69c:	20 95       	com	r18
     69e:	28 23       	and	r18, r24
     6a0:	21 bb       	out	0x11, r18	; 17
			DDRD |=  (Copy_u8Direction << Copy_u8PinID);
     6a2:	21 b3       	in	r18, 0x11	; 17
     6a4:	84 2f       	mov	r24, r20
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	02 c0       	rjmp	.+4      	; 0x6ae <DIO_enuSetPinDirection+0xd8>
     6aa:	88 0f       	add	r24, r24
     6ac:	99 1f       	adc	r25, r25
     6ae:	6a 95       	dec	r22
     6b0:	e2 f7       	brpl	.-8      	; 0x6aa <DIO_enuSetPinDirection+0xd4>
     6b2:	82 2b       	or	r24, r18
     6b4:	81 bb       	out	0x11, r24	; 17

			break;

		}

		Local_enuErrorState = ES_OK;
     6b6:	80 e0       	ldi	r24, 0x00	; 0

		case DIO_u8GROUP_D:
			DDRD &= ~(DIO_BIT_MASK << Copy_u8PinID);
			DDRD |=  (Copy_u8Direction << Copy_u8PinID);

			break;
     6b8:	08 95       	ret

		Local_enuErrorState = ES_OK;
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
     6ba:	82 e0       	ldi	r24, 0x02	; 2
     6bc:	08 95       	ret
     6be:	82 e0       	ldi	r24, 0x02	; 2
     6c0:	08 95       	ret
     6c2:	82 e0       	ldi	r24, 0x02	; 2
     6c4:	08 95       	ret

			break;

		}

		Local_enuErrorState = ES_OK;
     6c6:	80 e0       	ldi	r24, 0x00	; 0
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
	}

	return Local_enuErrorState;
}
     6c8:	08 95       	ret

000006ca <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8GroupID, u8 Copy_u8PinID, u8 Copy_u8Value)
{
	ES_t Local_enuErrorState = ES_NOK;

	if (Copy_u8GroupID <= DIO_u8GROUP_D &&
     6ca:	84 30       	cpi	r24, 0x04	; 4
     6cc:	08 f0       	brcs	.+2      	; 0x6d0 <DIO_enuSetPinValue+0x6>
     6ce:	6f c0       	rjmp	.+222    	; 0x7ae <DIO_enuSetPinValue+0xe4>
     6d0:	68 30       	cpi	r22, 0x08	; 8
     6d2:	08 f0       	brcs	.+2      	; 0x6d6 <DIO_enuSetPinValue+0xc>
     6d4:	6e c0       	rjmp	.+220    	; 0x7b2 <DIO_enuSetPinValue+0xe8>
			Copy_u8PinID <= DIO_u8PIN7 &&
     6d6:	42 30       	cpi	r20, 0x02	; 2
     6d8:	08 f0       	brcs	.+2      	; 0x6dc <DIO_enuSetPinValue+0x12>
     6da:	6d c0       	rjmp	.+218    	; 0x7b6 <DIO_enuSetPinValue+0xec>
			Copy_u8Value <= DIO_u8HIGH)
	{
		switch (Copy_u8GroupID)
     6dc:	81 30       	cpi	r24, 0x01	; 1
     6de:	f9 f0       	breq	.+62     	; 0x71e <DIO_enuSetPinValue+0x54>
     6e0:	30 f0       	brcs	.+12     	; 0x6ee <DIO_enuSetPinValue+0x24>
     6e2:	82 30       	cpi	r24, 0x02	; 2
     6e4:	a1 f1       	breq	.+104    	; 0x74e <DIO_enuSetPinValue+0x84>
     6e6:	83 30       	cpi	r24, 0x03	; 3
     6e8:	09 f4       	brne	.+2      	; 0x6ec <DIO_enuSetPinValue+0x22>
     6ea:	49 c0       	rjmp	.+146    	; 0x77e <DIO_enuSetPinValue+0xb4>
     6ec:	66 c0       	rjmp	.+204    	; 0x7ba <DIO_enuSetPinValue+0xf0>
		{
		case DIO_u8GROUP_A:
			PORTA &= ~(DIO_BIT_MASK << Copy_u8PinID);
     6ee:	2b b3       	in	r18, 0x1b	; 27
     6f0:	81 e0       	ldi	r24, 0x01	; 1
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	06 2e       	mov	r0, r22
     6f6:	02 c0       	rjmp	.+4      	; 0x6fc <DIO_enuSetPinValue+0x32>
     6f8:	88 0f       	add	r24, r24
     6fa:	99 1f       	adc	r25, r25
     6fc:	0a 94       	dec	r0
     6fe:	e2 f7       	brpl	.-8      	; 0x6f8 <DIO_enuSetPinValue+0x2e>
     700:	80 95       	com	r24
     702:	82 23       	and	r24, r18
     704:	8b bb       	out	0x1b, r24	; 27
			PORTA |=  (Copy_u8Value << Copy_u8PinID);
     706:	2b b3       	in	r18, 0x1b	; 27
     708:	84 2f       	mov	r24, r20
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	02 c0       	rjmp	.+4      	; 0x712 <DIO_enuSetPinValue+0x48>
     70e:	88 0f       	add	r24, r24
     710:	99 1f       	adc	r25, r25
     712:	6a 95       	dec	r22
     714:	e2 f7       	brpl	.-8      	; 0x70e <DIO_enuSetPinValue+0x44>
     716:	82 2b       	or	r24, r18
     718:	8b bb       	out	0x1b, r24	; 27

			break;

		}

		Local_enuErrorState = ES_OK;
     71a:	80 e0       	ldi	r24, 0x00	; 0
		switch (Copy_u8GroupID)
		{
		case DIO_u8GROUP_A:
			PORTA &= ~(DIO_BIT_MASK << Copy_u8PinID);
			PORTA |=  (Copy_u8Value << Copy_u8PinID);
			break;
     71c:	08 95       	ret

		case DIO_u8GROUP_B:
			PORTB &= ~(DIO_BIT_MASK << Copy_u8PinID);
     71e:	88 b3       	in	r24, 0x18	; 24
     720:	21 e0       	ldi	r18, 0x01	; 1
     722:	30 e0       	ldi	r19, 0x00	; 0
     724:	06 2e       	mov	r0, r22
     726:	02 c0       	rjmp	.+4      	; 0x72c <DIO_enuSetPinValue+0x62>
     728:	22 0f       	add	r18, r18
     72a:	33 1f       	adc	r19, r19
     72c:	0a 94       	dec	r0
     72e:	e2 f7       	brpl	.-8      	; 0x728 <DIO_enuSetPinValue+0x5e>
     730:	20 95       	com	r18
     732:	28 23       	and	r18, r24
     734:	28 bb       	out	0x18, r18	; 24
			PORTB |=  (Copy_u8Value << Copy_u8PinID);
     736:	28 b3       	in	r18, 0x18	; 24
     738:	84 2f       	mov	r24, r20
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	02 c0       	rjmp	.+4      	; 0x742 <DIO_enuSetPinValue+0x78>
     73e:	88 0f       	add	r24, r24
     740:	99 1f       	adc	r25, r25
     742:	6a 95       	dec	r22
     744:	e2 f7       	brpl	.-8      	; 0x73e <DIO_enuSetPinValue+0x74>
     746:	82 2b       	or	r24, r18
     748:	88 bb       	out	0x18, r24	; 24

			break;

		}

		Local_enuErrorState = ES_OK;
     74a:	80 e0       	ldi	r24, 0x00	; 0

		case DIO_u8GROUP_B:
			PORTB &= ~(DIO_BIT_MASK << Copy_u8PinID);
			PORTB |=  (Copy_u8Value << Copy_u8PinID);

			break;
     74c:	08 95       	ret

		case DIO_u8GROUP_C:
			PORTC &= ~(DIO_BIT_MASK << Copy_u8PinID);
     74e:	85 b3       	in	r24, 0x15	; 21
     750:	21 e0       	ldi	r18, 0x01	; 1
     752:	30 e0       	ldi	r19, 0x00	; 0
     754:	06 2e       	mov	r0, r22
     756:	02 c0       	rjmp	.+4      	; 0x75c <DIO_enuSetPinValue+0x92>
     758:	22 0f       	add	r18, r18
     75a:	33 1f       	adc	r19, r19
     75c:	0a 94       	dec	r0
     75e:	e2 f7       	brpl	.-8      	; 0x758 <DIO_enuSetPinValue+0x8e>
     760:	20 95       	com	r18
     762:	28 23       	and	r18, r24
     764:	25 bb       	out	0x15, r18	; 21
			PORTC |=  (Copy_u8Value << Copy_u8PinID);
     766:	25 b3       	in	r18, 0x15	; 21
     768:	84 2f       	mov	r24, r20
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	02 c0       	rjmp	.+4      	; 0x772 <DIO_enuSetPinValue+0xa8>
     76e:	88 0f       	add	r24, r24
     770:	99 1f       	adc	r25, r25
     772:	6a 95       	dec	r22
     774:	e2 f7       	brpl	.-8      	; 0x76e <DIO_enuSetPinValue+0xa4>
     776:	82 2b       	or	r24, r18
     778:	85 bb       	out	0x15, r24	; 21

			break;

		}

		Local_enuErrorState = ES_OK;
     77a:	80 e0       	ldi	r24, 0x00	; 0

		case DIO_u8GROUP_C:
			PORTC &= ~(DIO_BIT_MASK << Copy_u8PinID);
			PORTC |=  (Copy_u8Value << Copy_u8PinID);

			break;
     77c:	08 95       	ret

		case DIO_u8GROUP_D:
			PORTD &= ~(DIO_BIT_MASK << Copy_u8PinID);
     77e:	82 b3       	in	r24, 0x12	; 18
     780:	21 e0       	ldi	r18, 0x01	; 1
     782:	30 e0       	ldi	r19, 0x00	; 0
     784:	06 2e       	mov	r0, r22
     786:	02 c0       	rjmp	.+4      	; 0x78c <DIO_enuSetPinValue+0xc2>
     788:	22 0f       	add	r18, r18
     78a:	33 1f       	adc	r19, r19
     78c:	0a 94       	dec	r0
     78e:	e2 f7       	brpl	.-8      	; 0x788 <DIO_enuSetPinValue+0xbe>
     790:	20 95       	com	r18
     792:	28 23       	and	r18, r24
     794:	22 bb       	out	0x12, r18	; 18
			PORTD |=  (Copy_u8Value << Copy_u8PinID);
     796:	22 b3       	in	r18, 0x12	; 18
     798:	84 2f       	mov	r24, r20
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	02 c0       	rjmp	.+4      	; 0x7a2 <DIO_enuSetPinValue+0xd8>
     79e:	88 0f       	add	r24, r24
     7a0:	99 1f       	adc	r25, r25
     7a2:	6a 95       	dec	r22
     7a4:	e2 f7       	brpl	.-8      	; 0x79e <DIO_enuSetPinValue+0xd4>
     7a6:	82 2b       	or	r24, r18
     7a8:	82 bb       	out	0x12, r24	; 18

			break;

		}

		Local_enuErrorState = ES_OK;
     7aa:	80 e0       	ldi	r24, 0x00	; 0

		case DIO_u8GROUP_D:
			PORTD &= ~(DIO_BIT_MASK << Copy_u8PinID);
			PORTD |=  (Copy_u8Value << Copy_u8PinID);

			break;
     7ac:	08 95       	ret

		Local_enuErrorState = ES_OK;
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
     7ae:	82 e0       	ldi	r24, 0x02	; 2
     7b0:	08 95       	ret
     7b2:	82 e0       	ldi	r24, 0x02	; 2
     7b4:	08 95       	ret
     7b6:	82 e0       	ldi	r24, 0x02	; 2
     7b8:	08 95       	ret

			break;

		}

		Local_enuErrorState = ES_OK;
     7ba:	80 e0       	ldi	r24, 0x00	; 0
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
	}

	return Local_enuErrorState;
}
     7bc:	08 95       	ret

000007be <DIO_enuTogglePinValue>:

ES_t DIO_enuTogglePinValue(u8 Copy_u8GroupID, u8 Copy_u8PinID)
{
	ES_t Local_enuErrorState = ES_NOK;

	if (Copy_u8GroupID <= DIO_u8GROUP_D &&
     7be:	84 30       	cpi	r24, 0x04	; 4
     7c0:	d0 f5       	brcc	.+116    	; 0x836 <__DATA_REGION_LENGTH__+0x36>
     7c2:	68 30       	cpi	r22, 0x08	; 8
     7c4:	d0 f5       	brcc	.+116    	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
			Copy_u8PinID <= DIO_u8PIN7 )
	{
		switch (Copy_u8GroupID)
     7c6:	81 30       	cpi	r24, 0x01	; 1
     7c8:	91 f0       	breq	.+36     	; 0x7ee <DIO_enuTogglePinValue+0x30>
     7ca:	28 f0       	brcs	.+10     	; 0x7d6 <DIO_enuTogglePinValue+0x18>
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	d9 f0       	breq	.+54     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
     7d0:	83 30       	cpi	r24, 0x03	; 3
     7d2:	29 f1       	breq	.+74     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
     7d4:	34 c0       	rjmp	.+104    	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
		{
		case DIO_u8GROUP_A:
			PORTA ^=  (DIO_BIT_MASK << Copy_u8PinID);
     7d6:	2b b3       	in	r18, 0x1b	; 27
     7d8:	81 e0       	ldi	r24, 0x01	; 1
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	02 c0       	rjmp	.+4      	; 0x7e2 <DIO_enuTogglePinValue+0x24>
     7de:	88 0f       	add	r24, r24
     7e0:	99 1f       	adc	r25, r25
     7e2:	6a 95       	dec	r22
     7e4:	e2 f7       	brpl	.-8      	; 0x7de <DIO_enuTogglePinValue+0x20>
     7e6:	82 27       	eor	r24, r18
     7e8:	8b bb       	out	0x1b, r24	; 27

			break;

		}

		Local_enuErrorState = ES_OK;
     7ea:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch (Copy_u8GroupID)
		{
		case DIO_u8GROUP_A:
			PORTA ^=  (DIO_BIT_MASK << Copy_u8PinID);
			break;
     7ec:	08 95       	ret

		case DIO_u8GROUP_B:
			PORTB ^=  (DIO_BIT_MASK << Copy_u8PinID);
     7ee:	28 b3       	in	r18, 0x18	; 24
     7f0:	81 e0       	ldi	r24, 0x01	; 1
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	02 c0       	rjmp	.+4      	; 0x7fa <DIO_enuTogglePinValue+0x3c>
     7f6:	88 0f       	add	r24, r24
     7f8:	99 1f       	adc	r25, r25
     7fa:	6a 95       	dec	r22
     7fc:	e2 f7       	brpl	.-8      	; 0x7f6 <DIO_enuTogglePinValue+0x38>
     7fe:	82 27       	eor	r24, r18
     800:	88 bb       	out	0x18, r24	; 24

			break;

		}

		Local_enuErrorState = ES_OK;
     802:	80 e0       	ldi	r24, 0x00	; 0
			break;

		case DIO_u8GROUP_B:
			PORTB ^=  (DIO_BIT_MASK << Copy_u8PinID);

			break;
     804:	08 95       	ret

		case DIO_u8GROUP_C:
			PORTC ^=  (DIO_BIT_MASK << Copy_u8PinID);
     806:	25 b3       	in	r18, 0x15	; 21
     808:	81 e0       	ldi	r24, 0x01	; 1
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	02 c0       	rjmp	.+4      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
     80e:	88 0f       	add	r24, r24
     810:	99 1f       	adc	r25, r25
     812:	6a 95       	dec	r22
     814:	e2 f7       	brpl	.-8      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
     816:	82 27       	eor	r24, r18
     818:	85 bb       	out	0x15, r24	; 21

			break;

		}

		Local_enuErrorState = ES_OK;
     81a:	80 e0       	ldi	r24, 0x00	; 0
			break;

		case DIO_u8GROUP_C:
			PORTC ^=  (DIO_BIT_MASK << Copy_u8PinID);

			break;
     81c:	08 95       	ret

		case DIO_u8GROUP_D:
			PORTD ^=  (DIO_BIT_MASK << Copy_u8PinID);
     81e:	22 b3       	in	r18, 0x12	; 18
     820:	81 e0       	ldi	r24, 0x01	; 1
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	02 c0       	rjmp	.+4      	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
     826:	88 0f       	add	r24, r24
     828:	99 1f       	adc	r25, r25
     82a:	6a 95       	dec	r22
     82c:	e2 f7       	brpl	.-8      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
     82e:	82 27       	eor	r24, r18
     830:	82 bb       	out	0x12, r24	; 18

			break;

		}

		Local_enuErrorState = ES_OK;
     832:	80 e0       	ldi	r24, 0x00	; 0
			break;

		case DIO_u8GROUP_D:
			PORTD ^=  (DIO_BIT_MASK << Copy_u8PinID);

			break;
     834:	08 95       	ret

		Local_enuErrorState = ES_OK;
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
     836:	82 e0       	ldi	r24, 0x02	; 2
     838:	08 95       	ret
     83a:	82 e0       	ldi	r24, 0x02	; 2
     83c:	08 95       	ret

			break;

		}

		Local_enuErrorState = ES_OK;
     83e:	80 e0       	ldi	r24, 0x00	; 0
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
	}

	return Local_enuErrorState;
}
     840:	08 95       	ret

00000842 <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8GroupID, u8 Copy_u8PinID, u8 * Copy_u8PinValue)
{
	ES_t Local_enuErrorState = ES_NOK;

	if (Copy_u8PinValue != NULL)
     842:	41 15       	cp	r20, r1
     844:	51 05       	cpc	r21, r1
     846:	e1 f1       	breq	.+120    	; 0x8c0 <__stack+0x61>
	{
		if (Copy_u8GroupID <= DIO_u8GROUP_D &&
     848:	84 30       	cpi	r24, 0x04	; 4
     84a:	e0 f5       	brcc	.+120    	; 0x8c4 <__stack+0x65>
     84c:	68 30       	cpi	r22, 0x08	; 8
     84e:	e0 f5       	brcc	.+120    	; 0x8c8 <__stack+0x69>
				Copy_u8PinID <= DIO_u8PIN7)
		{
			switch (Copy_u8GroupID)
     850:	81 30       	cpi	r24, 0x01	; 1
     852:	91 f0       	breq	.+36     	; 0x878 <__stack+0x19>
     854:	28 f0       	brcs	.+10     	; 0x860 <__stack+0x1>
     856:	82 30       	cpi	r24, 0x02	; 2
     858:	d9 f0       	breq	.+54     	; 0x890 <__stack+0x31>
     85a:	83 30       	cpi	r24, 0x03	; 3
     85c:	29 f1       	breq	.+74     	; 0x8a8 <__stack+0x49>
     85e:	36 c0       	rjmp	.+108    	; 0x8cc <__stack+0x6d>
			{
			case DIO_u8GROUP_A:

				*Copy_u8PinValue =  ((PINA >> Copy_u8PinID) & DIO_BIT_MASK);
     860:	89 b3       	in	r24, 0x19	; 25
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	02 c0       	rjmp	.+4      	; 0x86a <__stack+0xb>
     866:	95 95       	asr	r25
     868:	87 95       	ror	r24
     86a:	6a 95       	dec	r22
     86c:	e2 f7       	brpl	.-8      	; 0x866 <__stack+0x7>
     86e:	81 70       	andi	r24, 0x01	; 1
     870:	fa 01       	movw	r30, r20
     872:	80 83       	st	Z, r24

				*Copy_u8PinValue =  ((PIND >> Copy_u8PinID) & DIO_BIT_MASK);

				break;
			}
			Local_enuErrorState = ES_OK;
     874:	80 e0       	ldi	r24, 0x00	; 0
			{
			case DIO_u8GROUP_A:

				*Copy_u8PinValue =  ((PINA >> Copy_u8PinID) & DIO_BIT_MASK);

				break;
     876:	08 95       	ret

			case DIO_u8GROUP_B:

				*Copy_u8PinValue =  ((PINB >> Copy_u8PinID) & DIO_BIT_MASK);
     878:	86 b3       	in	r24, 0x16	; 22
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	02 c0       	rjmp	.+4      	; 0x882 <__stack+0x23>
     87e:	95 95       	asr	r25
     880:	87 95       	ror	r24
     882:	6a 95       	dec	r22
     884:	e2 f7       	brpl	.-8      	; 0x87e <__stack+0x1f>
     886:	81 70       	andi	r24, 0x01	; 1
     888:	fa 01       	movw	r30, r20
     88a:	80 83       	st	Z, r24

				*Copy_u8PinValue =  ((PIND >> Copy_u8PinID) & DIO_BIT_MASK);

				break;
			}
			Local_enuErrorState = ES_OK;
     88c:	80 e0       	ldi	r24, 0x00	; 0

			case DIO_u8GROUP_B:

				*Copy_u8PinValue =  ((PINB >> Copy_u8PinID) & DIO_BIT_MASK);

				break;
     88e:	08 95       	ret

			case DIO_u8GROUP_C:

				*Copy_u8PinValue =  ((PINC >> Copy_u8PinID) & DIO_BIT_MASK);
     890:	83 b3       	in	r24, 0x13	; 19
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	02 c0       	rjmp	.+4      	; 0x89a <__stack+0x3b>
     896:	95 95       	asr	r25
     898:	87 95       	ror	r24
     89a:	6a 95       	dec	r22
     89c:	e2 f7       	brpl	.-8      	; 0x896 <__stack+0x37>
     89e:	81 70       	andi	r24, 0x01	; 1
     8a0:	fa 01       	movw	r30, r20
     8a2:	80 83       	st	Z, r24

				*Copy_u8PinValue =  ((PIND >> Copy_u8PinID) & DIO_BIT_MASK);

				break;
			}
			Local_enuErrorState = ES_OK;
     8a4:	80 e0       	ldi	r24, 0x00	; 0

			case DIO_u8GROUP_C:

				*Copy_u8PinValue =  ((PINC >> Copy_u8PinID) & DIO_BIT_MASK);

				break;
     8a6:	08 95       	ret

			case DIO_u8GROUP_D:

				*Copy_u8PinValue =  ((PIND >> Copy_u8PinID) & DIO_BIT_MASK);
     8a8:	80 b3       	in	r24, 0x10	; 16
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	02 c0       	rjmp	.+4      	; 0x8b2 <__stack+0x53>
     8ae:	95 95       	asr	r25
     8b0:	87 95       	ror	r24
     8b2:	6a 95       	dec	r22
     8b4:	e2 f7       	brpl	.-8      	; 0x8ae <__stack+0x4f>
     8b6:	81 70       	andi	r24, 0x01	; 1
     8b8:	fa 01       	movw	r30, r20
     8ba:	80 83       	st	Z, r24

				break;
			}
			Local_enuErrorState = ES_OK;
     8bc:	80 e0       	ldi	r24, 0x00	; 0

			case DIO_u8GROUP_D:

				*Copy_u8PinValue =  ((PIND >> Copy_u8PinID) & DIO_BIT_MASK);

				break;
     8be:	08 95       	ret
			Local_enuErrorState = ES_OUT_OF_RANGE;
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
     8c0:	83 e0       	ldi	r24, 0x03	; 3
     8c2:	08 95       	ret
			}
			Local_enuErrorState = ES_OK;
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
     8c4:	82 e0       	ldi	r24, 0x02	; 2
     8c6:	08 95       	ret
     8c8:	82 e0       	ldi	r24, 0x02	; 2
     8ca:	08 95       	ret

				*Copy_u8PinValue =  ((PIND >> Copy_u8PinID) & DIO_BIT_MASK);

				break;
			}
			Local_enuErrorState = ES_OK;
     8cc:	80 e0       	ldi	r24, 0x00	; 0
	{
		Local_enuErrorState = ES_NULL_POINTER;
	}

	return Local_enuErrorState;
}
     8ce:	08 95       	ret

000008d0 <EEPROM_write>:

ES_t EEPROM_write(u16 copy_u16address,u8 copy_u8data)
{
	ES_t local_enuErrorState=ES_NOK;

	while (1 == ((EECR>>1)&1));
     8d0:	e1 99       	sbic	0x1c, 1	; 28
     8d2:	fe cf       	rjmp	.-4      	; 0x8d0 <EEPROM_write>
	EEARH= (u8)(copy_u16address>>8);
     8d4:	9f bb       	out	0x1f, r25	; 31
	EEARL= (u8) copy_u16address;
     8d6:	8e bb       	out	0x1e, r24	; 30
	EEDR = copy_u8data;
     8d8:	6d bb       	out	0x1d, r22	; 29
	EECR|= (1<<2);
     8da:	8c b3       	in	r24, 0x1c	; 28
     8dc:	84 60       	ori	r24, 0x04	; 4
     8de:	8c bb       	out	0x1c, r24	; 28
	asm("SBI 0x1C,2");
     8e0:	e2 9a       	sbi	0x1c, 2	; 28
	asm("SBI 0x1C,1");
     8e2:	e1 9a       	sbi	0x1c, 1	; 28
	local_enuErrorState=ES_OK;
	return local_enuErrorState;
}
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	08 95       	ret

000008e8 <EEPROM_read>:
ES_t EEPROM_read(u16 copy_u16address,u8 *copy_u8data){
	ES_t local_enuErrorState=ES_NOK;

	while (1 == ((EECR>>1)&1));
     8e8:	e1 99       	sbic	0x1c, 1	; 28
     8ea:	fe cf       	rjmp	.-4      	; 0x8e8 <EEPROM_read>
	EEARH= (u8)(copy_u16address>>8);
     8ec:	9f bb       	out	0x1f, r25	; 31
	EEARL= (u8) copy_u16address;
     8ee:	8e bb       	out	0x1e, r24	; 30
	EECR|= (1<<0);
     8f0:	8c b3       	in	r24, 0x1c	; 28
     8f2:	81 60       	ori	r24, 0x01	; 1
     8f4:	8c bb       	out	0x1c, r24	; 28
	*copy_u8data = EEDR;
     8f6:	8d b3       	in	r24, 0x1d	; 29
     8f8:	fb 01       	movw	r30, r22
     8fa:	80 83       	st	Z, r24

	return local_enuErrorState;
}
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	08 95       	ret

00000900 <EXTI_enuInit>:
		else	return ES_OUT_OF_RANGE;

	}
	else Local_enuErrorState = ES_NULL_POINTER;
	return Local_enuErrorState;
}
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	a8 c0       	rjmp	.+336    	; 0xa56 <EXTI_enuInit+0x156>
     906:	29 2f       	mov	r18, r25
     908:	30 e0       	ldi	r19, 0x00	; 0
     90a:	f9 01       	movw	r30, r18
     90c:	ee 0f       	add	r30, r30
     90e:	ff 1f       	adc	r31, r31
     910:	e2 0f       	add	r30, r18
     912:	f3 1f       	adc	r31, r19
     914:	ed 59       	subi	r30, 0x9D	; 157
     916:	ff 4f       	sbci	r31, 0xFF	; 255
     918:	40 81       	ld	r20, Z
     91a:	41 11       	cpse	r20, r1
     91c:	37 c0       	rjmp	.+110    	; 0x98c <EXTI_enuInit+0x8c>
     91e:	45 b7       	in	r20, 0x35	; 53
     920:	4c 7f       	andi	r20, 0xFC	; 252
     922:	45 bf       	out	0x35, r20	; 53
     924:	f9 01       	movw	r30, r18
     926:	ee 0f       	add	r30, r30
     928:	ff 1f       	adc	r31, r31
     92a:	e2 0f       	add	r30, r18
     92c:	f3 1f       	adc	r31, r19
     92e:	ed 59       	subi	r30, 0x9D	; 157
     930:	ff 4f       	sbci	r31, 0xFF	; 255
     932:	42 81       	ldd	r20, Z+2	; 0x02
     934:	4f 31       	cpi	r20, 0x1F	; 31
     936:	69 f0       	breq	.+26     	; 0x952 <EXTI_enuInit+0x52>
     938:	18 f4       	brcc	.+6      	; 0x940 <EXTI_enuInit+0x40>
     93a:	47 31       	cpi	r20, 0x17	; 23
     93c:	31 f0       	breq	.+12     	; 0x94a <EXTI_enuInit+0x4a>
     93e:	91 c0       	rjmp	.+290    	; 0xa62 <EXTI_enuInit+0x162>
     940:	41 34       	cpi	r20, 0x41	; 65
     942:	71 f0       	breq	.+28     	; 0x960 <EXTI_enuInit+0x60>
     944:	42 36       	cpi	r20, 0x62	; 98
     946:	49 f0       	breq	.+18     	; 0x95a <EXTI_enuInit+0x5a>
     948:	8c c0       	rjmp	.+280    	; 0xa62 <EXTI_enuInit+0x162>
     94a:	45 b7       	in	r20, 0x35	; 53
     94c:	41 60       	ori	r20, 0x01	; 1
     94e:	45 bf       	out	0x35, r20	; 53
     950:	07 c0       	rjmp	.+14     	; 0x960 <EXTI_enuInit+0x60>
     952:	45 b7       	in	r20, 0x35	; 53
     954:	42 60       	ori	r20, 0x02	; 2
     956:	45 bf       	out	0x35, r20	; 53
     958:	03 c0       	rjmp	.+6      	; 0x960 <EXTI_enuInit+0x60>
     95a:	45 b7       	in	r20, 0x35	; 53
     95c:	43 60       	ori	r20, 0x03	; 3
     95e:	45 bf       	out	0x35, r20	; 53
     960:	f9 01       	movw	r30, r18
     962:	ee 0f       	add	r30, r30
     964:	ff 1f       	adc	r31, r31
     966:	2e 0f       	add	r18, r30
     968:	3f 1f       	adc	r19, r31
     96a:	f9 01       	movw	r30, r18
     96c:	ed 59       	subi	r30, 0x9D	; 157
     96e:	ff 4f       	sbci	r31, 0xFF	; 255
     970:	21 81       	ldd	r18, Z+1	; 0x01
     972:	2f 32       	cpi	r18, 0x2F	; 47
     974:	21 f4       	brne	.+8      	; 0x97e <EXTI_enuInit+0x7e>
     976:	2b b7       	in	r18, 0x3b	; 59
     978:	20 64       	ori	r18, 0x40	; 64
     97a:	2b bf       	out	0x3b, r18	; 59
     97c:	6b c0       	rjmp	.+214    	; 0xa54 <EXTI_enuInit+0x154>
     97e:	2c 35       	cpi	r18, 0x5C	; 92
     980:	09 f0       	breq	.+2      	; 0x984 <EXTI_enuInit+0x84>
     982:	71 c0       	rjmp	.+226    	; 0xa66 <EXTI_enuInit+0x166>
     984:	2b b7       	in	r18, 0x3b	; 59
     986:	2f 7b       	andi	r18, 0xBF	; 191
     988:	2b bf       	out	0x3b, r18	; 59
     98a:	64 c0       	rjmp	.+200    	; 0xa54 <EXTI_enuInit+0x154>
     98c:	41 30       	cpi	r20, 0x01	; 1
     98e:	b1 f5       	brne	.+108    	; 0x9fc <EXTI_enuInit+0xfc>
     990:	45 b7       	in	r20, 0x35	; 53
     992:	43 7f       	andi	r20, 0xF3	; 243
     994:	45 bf       	out	0x35, r20	; 53
     996:	f9 01       	movw	r30, r18
     998:	ee 0f       	add	r30, r30
     99a:	ff 1f       	adc	r31, r31
     99c:	e2 0f       	add	r30, r18
     99e:	f3 1f       	adc	r31, r19
     9a0:	ed 59       	subi	r30, 0x9D	; 157
     9a2:	ff 4f       	sbci	r31, 0xFF	; 255
     9a4:	42 81       	ldd	r20, Z+2	; 0x02
     9a6:	4f 31       	cpi	r20, 0x1F	; 31
     9a8:	69 f0       	breq	.+26     	; 0x9c4 <EXTI_enuInit+0xc4>
     9aa:	18 f4       	brcc	.+6      	; 0x9b2 <EXTI_enuInit+0xb2>
     9ac:	47 31       	cpi	r20, 0x17	; 23
     9ae:	31 f0       	breq	.+12     	; 0x9bc <EXTI_enuInit+0xbc>
     9b0:	5c c0       	rjmp	.+184    	; 0xa6a <EXTI_enuInit+0x16a>
     9b2:	41 34       	cpi	r20, 0x41	; 65
     9b4:	71 f0       	breq	.+28     	; 0x9d2 <EXTI_enuInit+0xd2>
     9b6:	42 36       	cpi	r20, 0x62	; 98
     9b8:	49 f0       	breq	.+18     	; 0x9cc <EXTI_enuInit+0xcc>
     9ba:	57 c0       	rjmp	.+174    	; 0xa6a <EXTI_enuInit+0x16a>
     9bc:	45 b7       	in	r20, 0x35	; 53
     9be:	44 60       	ori	r20, 0x04	; 4
     9c0:	45 bf       	out	0x35, r20	; 53
     9c2:	07 c0       	rjmp	.+14     	; 0x9d2 <EXTI_enuInit+0xd2>
     9c4:	45 b7       	in	r20, 0x35	; 53
     9c6:	48 60       	ori	r20, 0x08	; 8
     9c8:	45 bf       	out	0x35, r20	; 53
     9ca:	03 c0       	rjmp	.+6      	; 0x9d2 <EXTI_enuInit+0xd2>
     9cc:	45 b7       	in	r20, 0x35	; 53
     9ce:	4c 60       	ori	r20, 0x0C	; 12
     9d0:	45 bf       	out	0x35, r20	; 53
     9d2:	f9 01       	movw	r30, r18
     9d4:	ee 0f       	add	r30, r30
     9d6:	ff 1f       	adc	r31, r31
     9d8:	2e 0f       	add	r18, r30
     9da:	3f 1f       	adc	r19, r31
     9dc:	f9 01       	movw	r30, r18
     9de:	ed 59       	subi	r30, 0x9D	; 157
     9e0:	ff 4f       	sbci	r31, 0xFF	; 255
     9e2:	21 81       	ldd	r18, Z+1	; 0x01
     9e4:	2f 32       	cpi	r18, 0x2F	; 47
     9e6:	21 f4       	brne	.+8      	; 0x9f0 <EXTI_enuInit+0xf0>
     9e8:	2b b7       	in	r18, 0x3b	; 59
     9ea:	20 68       	ori	r18, 0x80	; 128
     9ec:	2b bf       	out	0x3b, r18	; 59
     9ee:	32 c0       	rjmp	.+100    	; 0xa54 <EXTI_enuInit+0x154>
     9f0:	2c 35       	cpi	r18, 0x5C	; 92
     9f2:	e9 f5       	brne	.+122    	; 0xa6e <EXTI_enuInit+0x16e>
     9f4:	2b b7       	in	r18, 0x3b	; 59
     9f6:	2f 77       	andi	r18, 0x7F	; 127
     9f8:	2b bf       	out	0x3b, r18	; 59
     9fa:	2c c0       	rjmp	.+88     	; 0xa54 <EXTI_enuInit+0x154>
     9fc:	42 30       	cpi	r20, 0x02	; 2
     9fe:	49 f5       	brne	.+82     	; 0xa52 <EXTI_enuInit+0x152>
     a00:	f9 01       	movw	r30, r18
     a02:	ee 0f       	add	r30, r30
     a04:	ff 1f       	adc	r31, r31
     a06:	e2 0f       	add	r30, r18
     a08:	f3 1f       	adc	r31, r19
     a0a:	ed 59       	subi	r30, 0x9D	; 157
     a0c:	ff 4f       	sbci	r31, 0xFF	; 255
     a0e:	42 81       	ldd	r20, Z+2	; 0x02
     a10:	4f 31       	cpi	r20, 0x1F	; 31
     a12:	19 f0       	breq	.+6      	; 0xa1a <EXTI_enuInit+0x11a>
     a14:	42 36       	cpi	r20, 0x62	; 98
     a16:	29 f0       	breq	.+10     	; 0xa22 <EXTI_enuInit+0x122>
     a18:	2c c0       	rjmp	.+88     	; 0xa72 <EXTI_enuInit+0x172>
     a1a:	44 b7       	in	r20, 0x34	; 52
     a1c:	4f 7b       	andi	r20, 0xBF	; 191
     a1e:	44 bf       	out	0x34, r20	; 52
     a20:	03 c0       	rjmp	.+6      	; 0xa28 <EXTI_enuInit+0x128>
     a22:	44 b7       	in	r20, 0x34	; 52
     a24:	40 64       	ori	r20, 0x40	; 64
     a26:	44 bf       	out	0x34, r20	; 52
     a28:	f9 01       	movw	r30, r18
     a2a:	ee 0f       	add	r30, r30
     a2c:	ff 1f       	adc	r31, r31
     a2e:	2e 0f       	add	r18, r30
     a30:	3f 1f       	adc	r19, r31
     a32:	f9 01       	movw	r30, r18
     a34:	ed 59       	subi	r30, 0x9D	; 157
     a36:	ff 4f       	sbci	r31, 0xFF	; 255
     a38:	21 81       	ldd	r18, Z+1	; 0x01
     a3a:	2f 32       	cpi	r18, 0x2F	; 47
     a3c:	21 f4       	brne	.+8      	; 0xa46 <EXTI_enuInit+0x146>
     a3e:	2b b7       	in	r18, 0x3b	; 59
     a40:	20 62       	ori	r18, 0x20	; 32
     a42:	2b bf       	out	0x3b, r18	; 59
     a44:	07 c0       	rjmp	.+14     	; 0xa54 <EXTI_enuInit+0x154>
     a46:	2c 35       	cpi	r18, 0x5C	; 92
     a48:	b1 f4       	brne	.+44     	; 0xa76 <EXTI_enuInit+0x176>
     a4a:	2b b7       	in	r18, 0x3b	; 59
     a4c:	2f 7d       	andi	r18, 0xDF	; 223
     a4e:	2b bf       	out	0x3b, r18	; 59
     a50:	01 c0       	rjmp	.+2      	; 0xa54 <EXTI_enuInit+0x154>
     a52:	82 e0       	ldi	r24, 0x02	; 2
     a54:	9f 5f       	subi	r25, 0xFF	; 255
     a56:	20 91 6c 00 	lds	r18, 0x006C	; 0x80006c <EXTI_u8EXTINum>
     a5a:	92 17       	cp	r25, r18
     a5c:	08 f4       	brcc	.+2      	; 0xa60 <EXTI_enuInit+0x160>
     a5e:	53 cf       	rjmp	.-346    	; 0x906 <EXTI_enuInit+0x6>
     a60:	08 95       	ret
     a62:	82 e0       	ldi	r24, 0x02	; 2
     a64:	08 95       	ret
     a66:	82 e0       	ldi	r24, 0x02	; 2
     a68:	08 95       	ret
     a6a:	82 e0       	ldi	r24, 0x02	; 2
     a6c:	08 95       	ret
     a6e:	82 e0       	ldi	r24, 0x02	; 2
     a70:	08 95       	ret
     a72:	82 e0       	ldi	r24, 0x02	; 2
     a74:	08 95       	ret
     a76:	82 e0       	ldi	r24, 0x02	; 2
     a78:	08 95       	ret

00000a7a <EXTI_enuEnableInterrupt>:

ES_t EXTI_enuEnableInterrupt(EXTI_t * Copy_pstrEXTIInfo)
{
	ES_t Local_enuErrorState= ES_NOK;
	if(Copy_pstrEXTIInfo!= NULL)
     a7a:	00 97       	sbiw	r24, 0x00	; 0
     a7c:	b9 f0       	breq	.+46     	; 0xaac <EXTI_enuEnableInterrupt+0x32>
	{
		if(Copy_pstrEXTIInfo->intPin == INT0)
     a7e:	fc 01       	movw	r30, r24
     a80:	80 81       	ld	r24, Z
     a82:	81 11       	cpse	r24, r1
     a84:	05 c0       	rjmp	.+10     	; 0xa90 <EXTI_enuEnableInterrupt+0x16>
		{
			GICR |=(1<<6);
     a86:	8b b7       	in	r24, 0x3b	; 59
     a88:	80 64       	ori	r24, 0x40	; 64
     a8a:	8b bf       	out	0x3b, r24	; 59
			Local_enuErrorState = ES_OK ;
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 95       	ret
		}
		else if(Copy_pstrEXTIInfo->intPin == INT1)
     a90:	81 30       	cpi	r24, 0x01	; 1
     a92:	29 f4       	brne	.+10     	; 0xa9e <EXTI_enuEnableInterrupt+0x24>
		{
			GICR |=(1<<7);
     a94:	8b b7       	in	r24, 0x3b	; 59
     a96:	80 68       	ori	r24, 0x80	; 128
     a98:	8b bf       	out	0x3b, r24	; 59
			Local_enuErrorState = ES_OK ;
     a9a:	80 e0       	ldi	r24, 0x00	; 0
     a9c:	08 95       	ret
		}
		else if(Copy_pstrEXTIInfo->intPin == INT2)
     a9e:	82 30       	cpi	r24, 0x02	; 2
     aa0:	39 f4       	brne	.+14     	; 0xab0 <EXTI_enuEnableInterrupt+0x36>
		{
			GICR |=(1<<5);
     aa2:	8b b7       	in	r24, 0x3b	; 59
     aa4:	80 62       	ori	r24, 0x20	; 32
     aa6:	8b bf       	out	0x3b, r24	; 59
			Local_enuErrorState = ES_OK ;
     aa8:	80 e0       	ldi	r24, 0x00	; 0
     aaa:	08 95       	ret
		}
		else	return ES_OUT_OF_RANGE;

	}
	else Local_enuErrorState = ES_NULL_POINTER;
     aac:	83 e0       	ldi	r24, 0x03	; 3
     aae:	08 95       	ret
		else if(Copy_pstrEXTIInfo->intPin == INT2)
		{
			GICR |=(1<<5);
			Local_enuErrorState = ES_OK ;
		}
		else	return ES_OUT_OF_RANGE;
     ab0:	82 e0       	ldi	r24, 0x02	; 2

	}
	else Local_enuErrorState = ES_NULL_POINTER;

	return Local_enuErrorState;
}
     ab2:	08 95       	ret

00000ab4 <EXTI_enuDisableInterrupt>:


ES_t EXTI_enuDisableInterrupt(EXTI_t * Copy_pstrEXTIInfo)
{
	ES_t Local_enuErrorState= ES_NOK;
	if(Copy_pstrEXTIInfo!= NULL)
     ab4:	00 97       	sbiw	r24, 0x00	; 0
     ab6:	b9 f0       	breq	.+46     	; 0xae6 <EXTI_enuDisableInterrupt+0x32>
	{
		if(Copy_pstrEXTIInfo->intPin == INT0)
     ab8:	fc 01       	movw	r30, r24
     aba:	80 81       	ld	r24, Z
     abc:	81 11       	cpse	r24, r1
     abe:	05 c0       	rjmp	.+10     	; 0xaca <EXTI_enuDisableInterrupt+0x16>
		{
			GICR &=~(1<<6);
     ac0:	8b b7       	in	r24, 0x3b	; 59
     ac2:	8f 7b       	andi	r24, 0xBF	; 191
     ac4:	8b bf       	out	0x3b, r24	; 59
			Local_enuErrorState = ES_OK ;
     ac6:	80 e0       	ldi	r24, 0x00	; 0
     ac8:	08 95       	ret
		}
		else if(Copy_pstrEXTIInfo->intPin == INT1)
     aca:	81 30       	cpi	r24, 0x01	; 1
     acc:	29 f4       	brne	.+10     	; 0xad8 <EXTI_enuDisableInterrupt+0x24>
		{
			GICR &=~(1<<7);
     ace:	8b b7       	in	r24, 0x3b	; 59
     ad0:	8f 77       	andi	r24, 0x7F	; 127
     ad2:	8b bf       	out	0x3b, r24	; 59
			Local_enuErrorState = ES_OK ;
     ad4:	80 e0       	ldi	r24, 0x00	; 0
     ad6:	08 95       	ret
		}
		else if(Copy_pstrEXTIInfo->intPin == INT2)
     ad8:	82 30       	cpi	r24, 0x02	; 2
     ada:	39 f4       	brne	.+14     	; 0xaea <EXTI_enuDisableInterrupt+0x36>
		{
			GICR &=~(1<<5);
     adc:	8b b7       	in	r24, 0x3b	; 59
     ade:	8f 7d       	andi	r24, 0xDF	; 223
     ae0:	8b bf       	out	0x3b, r24	; 59
			Local_enuErrorState = ES_OK ;
     ae2:	80 e0       	ldi	r24, 0x00	; 0
     ae4:	08 95       	ret
		}
		else	return ES_OUT_OF_RANGE;

	}
	else Local_enuErrorState = ES_NULL_POINTER;
     ae6:	83 e0       	ldi	r24, 0x03	; 3
     ae8:	08 95       	ret
		else if(Copy_pstrEXTIInfo->intPin == INT2)
		{
			GICR &=~(1<<5);
			Local_enuErrorState = ES_OK ;
		}
		else	return ES_OUT_OF_RANGE;
     aea:	82 e0       	ldi	r24, 0x02	; 2
	}
	else Local_enuErrorState = ES_NULL_POINTER;


	return Local_enuErrorState;
}
     aec:	08 95       	ret

00000aee <EXTI_enuCallBack>:

ES_t EXTI_enuCallBack(EXTI_t * Copy_pstrEXTIInfo , void (*Copy_pfunAppFun)(void*) , void * Copy_pvidParameter)
{
	ES_t Local_enuErrorState= ES_NOK;

	if(Copy_pstrEXTIInfo!= NULL && Copy_pfunAppFun!= NULL)
     aee:	00 97       	sbiw	r24, 0x00	; 0
     af0:	c1 f0       	breq	.+48     	; 0xb22 <EXTI_enuCallBack+0x34>
     af2:	61 15       	cp	r22, r1
     af4:	71 05       	cpc	r23, r1
     af6:	b9 f0       	breq	.+46     	; 0xb26 <EXTI_enuCallBack+0x38>
	{
		if(Copy_pstrEXTIInfo->intPin <=INT2)
     af8:	dc 01       	movw	r26, r24
     afa:	ec 91       	ld	r30, X
     afc:	e3 30       	cpi	r30, 0x03	; 3
     afe:	a8 f4       	brcc	.+42     	; 0xb2a <EXTI_enuCallBack+0x3c>
		{
			Local_enuErrorState = ES_OK ;
			EXTI_ApfunISRFun[Copy_pstrEXTIInfo->intPin] = Copy_pfunAppFun ;
     b00:	f0 e0       	ldi	r31, 0x00	; 0
     b02:	ee 0f       	add	r30, r30
     b04:	ff 1f       	adc	r31, r31
     b06:	e7 58       	subi	r30, 0x87	; 135
     b08:	ff 4f       	sbci	r31, 0xFF	; 255
     b0a:	71 83       	std	Z+1, r23	; 0x01
     b0c:	60 83       	st	Z, r22
			EXTI_ApvidISRParameter [Copy_pstrEXTIInfo->intPin] = Copy_pvidParameter ;
     b0e:	ec 91       	ld	r30, X
     b10:	f0 e0       	ldi	r31, 0x00	; 0
     b12:	ee 0f       	add	r30, r30
     b14:	ff 1f       	adc	r31, r31
     b16:	ed 58       	subi	r30, 0x8D	; 141
     b18:	ff 4f       	sbci	r31, 0xFF	; 255
     b1a:	51 83       	std	Z+1, r21	; 0x01
     b1c:	40 83       	st	Z, r20

	if(Copy_pstrEXTIInfo!= NULL && Copy_pfunAppFun!= NULL)
	{
		if(Copy_pstrEXTIInfo->intPin <=INT2)
		{
			Local_enuErrorState = ES_OK ;
     b1e:	80 e0       	ldi	r24, 0x00	; 0
     b20:	08 95       	ret
			EXTI_ApfunISRFun[Copy_pstrEXTIInfo->intPin] = Copy_pfunAppFun ;
			EXTI_ApvidISRParameter [Copy_pstrEXTIInfo->intPin] = Copy_pvidParameter ;
		}
		else Local_enuErrorState=ES_OUT_OF_RANGE;
	}
	else Local_enuErrorState = ES_NULL_POINTER ;
     b22:	83 e0       	ldi	r24, 0x03	; 3
     b24:	08 95       	ret
     b26:	83 e0       	ldi	r24, 0x03	; 3
     b28:	08 95       	ret
		{
			Local_enuErrorState = ES_OK ;
			EXTI_ApfunISRFun[Copy_pstrEXTIInfo->intPin] = Copy_pfunAppFun ;
			EXTI_ApvidISRParameter [Copy_pstrEXTIInfo->intPin] = Copy_pvidParameter ;
		}
		else Local_enuErrorState=ES_OUT_OF_RANGE;
     b2a:	82 e0       	ldi	r24, 0x02	; 2
	}
	else Local_enuErrorState = ES_NULL_POINTER ;
	return Local_enuErrorState;
}
     b2c:	08 95       	ret

00000b2e <__vector_1>:
void __vector_1 (void)__attribute__((signal)); //int0
void __vector_2 (void)__attribute__((signal));	//int1
void __vector_3 (void)__attribute__((signal));	//int2

void __vector_1 (void)
{
     b2e:	1f 92       	push	r1
     b30:	0f 92       	push	r0
     b32:	0f b6       	in	r0, 0x3f	; 63
     b34:	0f 92       	push	r0
     b36:	11 24       	eor	r1, r1
     b38:	2f 93       	push	r18
     b3a:	3f 93       	push	r19
     b3c:	4f 93       	push	r20
     b3e:	5f 93       	push	r21
     b40:	6f 93       	push	r22
     b42:	7f 93       	push	r23
     b44:	8f 93       	push	r24
     b46:	9f 93       	push	r25
     b48:	af 93       	push	r26
     b4a:	bf 93       	push	r27
     b4c:	ef 93       	push	r30
     b4e:	ff 93       	push	r31
	if(EXTI_ApfunISRFun[INT0]!=NULL)
     b50:	e0 91 79 00 	lds	r30, 0x0079	; 0x800079 <EXTI_ApfunISRFun>
     b54:	f0 91 7a 00 	lds	r31, 0x007A	; 0x80007a <EXTI_ApfunISRFun+0x1>
     b58:	30 97       	sbiw	r30, 0x00	; 0
     b5a:	29 f0       	breq	.+10     	; 0xb66 <__vector_1+0x38>
	{
		EXTI_ApfunISRFun[INT0](EXTI_ApvidISRParameter[INT0]);
     b5c:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <EXTI_ApvidISRParameter>
     b60:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <EXTI_ApvidISRParameter+0x1>
     b64:	09 95       	icall
	}
}
     b66:	ff 91       	pop	r31
     b68:	ef 91       	pop	r30
     b6a:	bf 91       	pop	r27
     b6c:	af 91       	pop	r26
     b6e:	9f 91       	pop	r25
     b70:	8f 91       	pop	r24
     b72:	7f 91       	pop	r23
     b74:	6f 91       	pop	r22
     b76:	5f 91       	pop	r21
     b78:	4f 91       	pop	r20
     b7a:	3f 91       	pop	r19
     b7c:	2f 91       	pop	r18
     b7e:	0f 90       	pop	r0
     b80:	0f be       	out	0x3f, r0	; 63
     b82:	0f 90       	pop	r0
     b84:	1f 90       	pop	r1
     b86:	18 95       	reti

00000b88 <__vector_2>:

void __vector_2 (void)
{
     b88:	1f 92       	push	r1
     b8a:	0f 92       	push	r0
     b8c:	0f b6       	in	r0, 0x3f	; 63
     b8e:	0f 92       	push	r0
     b90:	11 24       	eor	r1, r1
     b92:	2f 93       	push	r18
     b94:	3f 93       	push	r19
     b96:	4f 93       	push	r20
     b98:	5f 93       	push	r21
     b9a:	6f 93       	push	r22
     b9c:	7f 93       	push	r23
     b9e:	8f 93       	push	r24
     ba0:	9f 93       	push	r25
     ba2:	af 93       	push	r26
     ba4:	bf 93       	push	r27
     ba6:	ef 93       	push	r30
     ba8:	ff 93       	push	r31
	if(EXTI_ApfunISRFun[INT1]!=NULL)
     baa:	e0 91 7b 00 	lds	r30, 0x007B	; 0x80007b <EXTI_ApfunISRFun+0x2>
     bae:	f0 91 7c 00 	lds	r31, 0x007C	; 0x80007c <EXTI_ApfunISRFun+0x3>
     bb2:	30 97       	sbiw	r30, 0x00	; 0
     bb4:	29 f0       	breq	.+10     	; 0xbc0 <__vector_2+0x38>
	{
		EXTI_ApfunISRFun[INT1](EXTI_ApvidISRParameter[INT1]);
     bb6:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <EXTI_ApvidISRParameter+0x2>
     bba:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <EXTI_ApvidISRParameter+0x3>
     bbe:	09 95       	icall
	}
}
     bc0:	ff 91       	pop	r31
     bc2:	ef 91       	pop	r30
     bc4:	bf 91       	pop	r27
     bc6:	af 91       	pop	r26
     bc8:	9f 91       	pop	r25
     bca:	8f 91       	pop	r24
     bcc:	7f 91       	pop	r23
     bce:	6f 91       	pop	r22
     bd0:	5f 91       	pop	r21
     bd2:	4f 91       	pop	r20
     bd4:	3f 91       	pop	r19
     bd6:	2f 91       	pop	r18
     bd8:	0f 90       	pop	r0
     bda:	0f be       	out	0x3f, r0	; 63
     bdc:	0f 90       	pop	r0
     bde:	1f 90       	pop	r1
     be0:	18 95       	reti

00000be2 <__vector_3>:
void __vector_3 (void)
{
     be2:	1f 92       	push	r1
     be4:	0f 92       	push	r0
     be6:	0f b6       	in	r0, 0x3f	; 63
     be8:	0f 92       	push	r0
     bea:	11 24       	eor	r1, r1
     bec:	2f 93       	push	r18
     bee:	3f 93       	push	r19
     bf0:	4f 93       	push	r20
     bf2:	5f 93       	push	r21
     bf4:	6f 93       	push	r22
     bf6:	7f 93       	push	r23
     bf8:	8f 93       	push	r24
     bfa:	9f 93       	push	r25
     bfc:	af 93       	push	r26
     bfe:	bf 93       	push	r27
     c00:	ef 93       	push	r30
     c02:	ff 93       	push	r31
	if(EXTI_ApfunISRFun[INT2]!=NULL)
     c04:	e0 91 7d 00 	lds	r30, 0x007D	; 0x80007d <EXTI_ApfunISRFun+0x4>
     c08:	f0 91 7e 00 	lds	r31, 0x007E	; 0x80007e <EXTI_ApfunISRFun+0x5>
     c0c:	30 97       	sbiw	r30, 0x00	; 0
     c0e:	29 f0       	breq	.+10     	; 0xc1a <__vector_3+0x38>
	{
		EXTI_ApfunISRFun[INT2](EXTI_ApvidISRParameter[INT2]);
     c10:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <EXTI_ApvidISRParameter+0x4>
     c14:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <EXTI_ApvidISRParameter+0x5>
     c18:	09 95       	icall
	}
}
     c1a:	ff 91       	pop	r31
     c1c:	ef 91       	pop	r30
     c1e:	bf 91       	pop	r27
     c20:	af 91       	pop	r26
     c22:	9f 91       	pop	r25
     c24:	8f 91       	pop	r24
     c26:	7f 91       	pop	r23
     c28:	6f 91       	pop	r22
     c2a:	5f 91       	pop	r21
     c2c:	4f 91       	pop	r20
     c2e:	3f 91       	pop	r19
     c30:	2f 91       	pop	r18
     c32:	0f 90       	pop	r0
     c34:	0f be       	out	0x3f, r0	; 63
     c36:	0f 90       	pop	r0
     c38:	1f 90       	pop	r1
     c3a:	18 95       	reti

00000c3c <GIE_enuEnable>:
	return ES_OK;
}

ES_t GIE_enuEnable(void)
{
	asm("SEI");
     c3c:	78 94       	sei
	return ES_OK;
}
     c3e:	80 e0       	ldi	r24, 0x00	; 0
     c40:	08 95       	ret

00000c42 <TIMER2_enuInit>:
		TCCR2 |=Copy_u8Pres;
		Local_enuErrorState = ES_OK;
	}
	else Local_enuErrorState=ES_OUT_OF_RANGE;
	return Local_enuErrorState;
}
     c42:	15 bc       	out	0x25, r1	; 37
     c44:	85 b5       	in	r24, 0x25	; 37
     c46:	85 bd       	out	0x25, r24	; 37
     c48:	85 b5       	in	r24, 0x25	; 37
     c4a:	87 60       	ori	r24, 0x07	; 7
     c4c:	85 bd       	out	0x25, r24	; 37
     c4e:	89 b7       	in	r24, 0x39	; 57
     c50:	8f 73       	andi	r24, 0x3F	; 63
     c52:	89 bf       	out	0x39, r24	; 57
     c54:	89 b7       	in	r24, 0x39	; 57
     c56:	80 64       	ori	r24, 0x40	; 64
     c58:	89 bf       	out	0x39, r24	; 57
     c5a:	80 e0       	ldi	r24, 0x00	; 0
     c5c:	08 95       	ret

00000c5e <TIMER2_enuEnableInterrupt>:

ES_t TIMER2_enuEnableInterrupt(u8 Copy_u8InterruptMood)
{
	ES_t Local_enuErrorState=ES_NOK;
	if( !(Copy_u8InterruptMood & ~(OVERFLOW_INTER|COMPMATCH_INTER)))
     c5e:	28 2f       	mov	r18, r24
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	2f 73       	andi	r18, 0x3F	; 63
     c64:	23 2b       	or	r18, r19
     c66:	29 f4       	brne	.+10     	; 0xc72 <TIMER2_enuEnableInterrupt+0x14>
	{
		TIMSK |= Copy_u8InterruptMood;
     c68:	99 b7       	in	r25, 0x39	; 57
     c6a:	89 2b       	or	r24, r25
     c6c:	89 bf       	out	0x39, r24	; 57
		Local_enuErrorState= ES_OK;
     c6e:	80 e0       	ldi	r24, 0x00	; 0
     c70:	08 95       	ret

	}
	else Local_enuErrorState = ES_OUT_OF_RANGE;
     c72:	82 e0       	ldi	r24, 0x02	; 2
	return Local_enuErrorState;
}
     c74:	08 95       	ret

00000c76 <TIMER2_enuDisableInterrupt>:

ES_t TIMER2_enuDisableInterrupt(u8 Copy_u8InterruptMood)
{
	ES_t Local_enuErrorState=ES_NOK;
	if( !(Copy_u8InterruptMood & ~(OVERFLOW_INTER|COMPMATCH_INTER)))
     c76:	28 2f       	mov	r18, r24
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	2f 73       	andi	r18, 0x3F	; 63
     c7c:	23 2b       	or	r18, r19
     c7e:	31 f4       	brne	.+12     	; 0xc8c <TIMER2_enuDisableInterrupt+0x16>
	{
		TIMSK &= ~Copy_u8InterruptMood;
     c80:	99 b7       	in	r25, 0x39	; 57
     c82:	80 95       	com	r24
     c84:	89 23       	and	r24, r25
     c86:	89 bf       	out	0x39, r24	; 57
		Local_enuErrorState= ES_OK;
     c88:	80 e0       	ldi	r24, 0x00	; 0
     c8a:	08 95       	ret
	return Local_enuErrorState;
}

ES_t TIMER2_enuDisableInterrupt(u8 Copy_u8InterruptMood)
{
	ES_t Local_enuErrorState=ES_NOK;
     c8c:	81 e0       	ldi	r24, 0x01	; 1
		Local_enuErrorState= ES_OK;

	}

	return Local_enuErrorState;
}
     c8e:	08 95       	ret

00000c90 <TIMER2_enuCallBackFun>:

ES_t TIMER2_enuCallBackFun(u8 Copy_u8InterruptMood,void (*Copy_pfunAPPFun)(void *),void* Copy_pvidISRPara)
{
	ES_t Local_enuErrorState=ES_NOK;

	if(!(Copy_u8InterruptMood & ~(OVERFLOW_INTER|COMPMATCH_INTER))&& Copy_u8InterruptMood!=(OVERFLOW_INTER|COMPMATCH_INTER))
     c90:	28 2f       	mov	r18, r24
     c92:	30 e0       	ldi	r19, 0x00	; 0
     c94:	2f 73       	andi	r18, 0x3F	; 63
     c96:	23 2b       	or	r18, r19
     c98:	d1 f4       	brne	.+52     	; 0xcce <TIMER2_enuCallBackFun+0x3e>
     c9a:	80 3c       	cpi	r24, 0xC0	; 192
     c9c:	d1 f0       	breq	.+52     	; 0xcd2 <TIMER2_enuCallBackFun+0x42>
	{
		if(NULL!=Copy_pfunAPPFun)
     c9e:	61 15       	cp	r22, r1
     ca0:	71 05       	cpc	r23, r1
     ca2:	c9 f0       	breq	.+50     	; 0xcd6 <TIMER2_enuCallBackFun+0x46>
		{
			TIMER2_ApfunISRfun[(COMPMATCH_INTER==Copy_u8InterruptMood)?0:1] = Copy_pfunAPPFun;
     ca4:	21 e0       	ldi	r18, 0x01	; 1
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	80 38       	cpi	r24, 0x80	; 128
     caa:	11 f4       	brne	.+4      	; 0xcb0 <TIMER2_enuCallBackFun+0x20>
     cac:	20 e0       	ldi	r18, 0x00	; 0
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	c9 01       	movw	r24, r18
     cb2:	88 0f       	add	r24, r24
     cb4:	99 1f       	adc	r25, r25
     cb6:	fc 01       	movw	r30, r24
     cb8:	ed 57       	subi	r30, 0x7D	; 125
     cba:	ff 4f       	sbci	r31, 0xFF	; 255
     cbc:	71 83       	std	Z+1, r23	; 0x01
     cbe:	60 83       	st	Z, r22
			TIMER2_ApvidISRParameter[(COMPMATCH_INTER==Copy_u8InterruptMood)?0:1] = Copy_pvidISRPara;
     cc0:	fc 01       	movw	r30, r24
     cc2:	e1 58       	subi	r30, 0x81	; 129
     cc4:	ff 4f       	sbci	r31, 0xFF	; 255
     cc6:	51 83       	std	Z+1, r21	; 0x01
     cc8:	40 83       	st	Z, r20
			Local_enuErrorState= ES_OK;
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	08 95       	ret
	return Local_enuErrorState;
}

ES_t TIMER2_enuCallBackFun(u8 Copy_u8InterruptMood,void (*Copy_pfunAPPFun)(void *),void* Copy_pvidISRPara)
{
	ES_t Local_enuErrorState=ES_NOK;
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	08 95       	ret
     cd2:	81 e0       	ldi	r24, 0x01	; 1
     cd4:	08 95       	ret
     cd6:	81 e0       	ldi	r24, 0x01	; 1
			Local_enuErrorState= ES_OK;
		}
	}

	return Local_enuErrorState;
}
     cd8:	08 95       	ret

00000cda <__vector_4>:

void __vector_4(void)__attribute__((signal));
void __vector_4(void)
{
     cda:	1f 92       	push	r1
     cdc:	0f 92       	push	r0
     cde:	0f b6       	in	r0, 0x3f	; 63
     ce0:	0f 92       	push	r0
     ce2:	11 24       	eor	r1, r1
     ce4:	2f 93       	push	r18
     ce6:	3f 93       	push	r19
     ce8:	4f 93       	push	r20
     cea:	5f 93       	push	r21
     cec:	6f 93       	push	r22
     cee:	7f 93       	push	r23
     cf0:	8f 93       	push	r24
     cf2:	9f 93       	push	r25
     cf4:	af 93       	push	r26
     cf6:	bf 93       	push	r27
     cf8:	ef 93       	push	r30
     cfa:	ff 93       	push	r31
	if(NULL!=TIMER2_ApfunISRfun[0])
     cfc:	e0 91 83 00 	lds	r30, 0x0083	; 0x800083 <TIMER2_ApfunISRfun>
     d00:	f0 91 84 00 	lds	r31, 0x0084	; 0x800084 <TIMER2_ApfunISRfun+0x1>
     d04:	30 97       	sbiw	r30, 0x00	; 0
     d06:	29 f0       	breq	.+10     	; 0xd12 <__vector_4+0x38>
		TIMER2_ApfunISRfun[0](TIMER2_ApvidISRParameter[0]);
     d08:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <TIMER2_ApvidISRParameter>
     d0c:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <TIMER2_ApvidISRParameter+0x1>
     d10:	09 95       	icall
}
     d12:	ff 91       	pop	r31
     d14:	ef 91       	pop	r30
     d16:	bf 91       	pop	r27
     d18:	af 91       	pop	r26
     d1a:	9f 91       	pop	r25
     d1c:	8f 91       	pop	r24
     d1e:	7f 91       	pop	r23
     d20:	6f 91       	pop	r22
     d22:	5f 91       	pop	r21
     d24:	4f 91       	pop	r20
     d26:	3f 91       	pop	r19
     d28:	2f 91       	pop	r18
     d2a:	0f 90       	pop	r0
     d2c:	0f be       	out	0x3f, r0	; 63
     d2e:	0f 90       	pop	r0
     d30:	1f 90       	pop	r1
     d32:	18 95       	reti

00000d34 <__vector_5>:

void __vector_5(void)__attribute__((signal));
void __vector_5(void)
{
     d34:	1f 92       	push	r1
     d36:	0f 92       	push	r0
     d38:	0f b6       	in	r0, 0x3f	; 63
     d3a:	0f 92       	push	r0
     d3c:	11 24       	eor	r1, r1
     d3e:	2f 93       	push	r18
     d40:	3f 93       	push	r19
     d42:	4f 93       	push	r20
     d44:	5f 93       	push	r21
     d46:	6f 93       	push	r22
     d48:	7f 93       	push	r23
     d4a:	8f 93       	push	r24
     d4c:	9f 93       	push	r25
     d4e:	af 93       	push	r26
     d50:	bf 93       	push	r27
     d52:	ef 93       	push	r30
     d54:	ff 93       	push	r31
	if(NULL!=TIMER2_ApfunISRfun[1])
     d56:	e0 91 85 00 	lds	r30, 0x0085	; 0x800085 <TIMER2_ApfunISRfun+0x2>
     d5a:	f0 91 86 00 	lds	r31, 0x0086	; 0x800086 <TIMER2_ApfunISRfun+0x3>
     d5e:	30 97       	sbiw	r30, 0x00	; 0
     d60:	29 f0       	breq	.+10     	; 0xd6c <__vector_5+0x38>
			TIMER2_ApfunISRfun[1](TIMER2_ApvidISRParameter[1]);
     d62:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <TIMER2_ApvidISRParameter+0x2>
     d66:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <TIMER2_ApvidISRParameter+0x3>
     d6a:	09 95       	icall
}
     d6c:	ff 91       	pop	r31
     d6e:	ef 91       	pop	r30
     d70:	bf 91       	pop	r27
     d72:	af 91       	pop	r26
     d74:	9f 91       	pop	r25
     d76:	8f 91       	pop	r24
     d78:	7f 91       	pop	r23
     d7a:	6f 91       	pop	r22
     d7c:	5f 91       	pop	r21
     d7e:	4f 91       	pop	r20
     d80:	3f 91       	pop	r19
     d82:	2f 91       	pop	r18
     d84:	0f 90       	pop	r0
     d86:	0f be       	out	0x3f, r0	; 63
     d88:	0f 90       	pop	r0
     d8a:	1f 90       	pop	r1
     d8c:	18 95       	reti

00000d8e <__divsf3>:
     d8e:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__divsf3x>
     d92:	0c 94 bd 07 	jmp	0xf7a	; 0xf7a <__fp_round>
     d96:	0e 94 b6 07 	call	0xf6c	; 0xf6c <__fp_pscB>
     d9a:	58 f0       	brcs	.+22     	; 0xdb2 <__divsf3+0x24>
     d9c:	0e 94 af 07 	call	0xf5e	; 0xf5e <__fp_pscA>
     da0:	40 f0       	brcs	.+16     	; 0xdb2 <__divsf3+0x24>
     da2:	29 f4       	brne	.+10     	; 0xdae <__divsf3+0x20>
     da4:	5f 3f       	cpi	r21, 0xFF	; 255
     da6:	29 f0       	breq	.+10     	; 0xdb2 <__divsf3+0x24>
     da8:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__fp_inf>
     dac:	51 11       	cpse	r21, r1
     dae:	0c 94 f1 07 	jmp	0xfe2	; 0xfe2 <__fp_szero>
     db2:	0c 94 ac 07 	jmp	0xf58	; 0xf58 <__fp_nan>

00000db6 <__divsf3x>:
     db6:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__fp_split3>
     dba:	68 f3       	brcs	.-38     	; 0xd96 <__divsf3+0x8>

00000dbc <__divsf3_pse>:
     dbc:	99 23       	and	r25, r25
     dbe:	b1 f3       	breq	.-20     	; 0xdac <__divsf3+0x1e>
     dc0:	55 23       	and	r21, r21
     dc2:	91 f3       	breq	.-28     	; 0xda8 <__divsf3+0x1a>
     dc4:	95 1b       	sub	r25, r21
     dc6:	55 0b       	sbc	r21, r21
     dc8:	bb 27       	eor	r27, r27
     dca:	aa 27       	eor	r26, r26
     dcc:	62 17       	cp	r22, r18
     dce:	73 07       	cpc	r23, r19
     dd0:	84 07       	cpc	r24, r20
     dd2:	38 f0       	brcs	.+14     	; 0xde2 <__divsf3_pse+0x26>
     dd4:	9f 5f       	subi	r25, 0xFF	; 255
     dd6:	5f 4f       	sbci	r21, 0xFF	; 255
     dd8:	22 0f       	add	r18, r18
     dda:	33 1f       	adc	r19, r19
     ddc:	44 1f       	adc	r20, r20
     dde:	aa 1f       	adc	r26, r26
     de0:	a9 f3       	breq	.-22     	; 0xdcc <__divsf3_pse+0x10>
     de2:	35 d0       	rcall	.+106    	; 0xe4e <__divsf3_pse+0x92>
     de4:	0e 2e       	mov	r0, r30
     de6:	3a f0       	brmi	.+14     	; 0xdf6 <__divsf3_pse+0x3a>
     de8:	e0 e8       	ldi	r30, 0x80	; 128
     dea:	32 d0       	rcall	.+100    	; 0xe50 <__divsf3_pse+0x94>
     dec:	91 50       	subi	r25, 0x01	; 1
     dee:	50 40       	sbci	r21, 0x00	; 0
     df0:	e6 95       	lsr	r30
     df2:	00 1c       	adc	r0, r0
     df4:	ca f7       	brpl	.-14     	; 0xde8 <__divsf3_pse+0x2c>
     df6:	2b d0       	rcall	.+86     	; 0xe4e <__divsf3_pse+0x92>
     df8:	fe 2f       	mov	r31, r30
     dfa:	29 d0       	rcall	.+82     	; 0xe4e <__divsf3_pse+0x92>
     dfc:	66 0f       	add	r22, r22
     dfe:	77 1f       	adc	r23, r23
     e00:	88 1f       	adc	r24, r24
     e02:	bb 1f       	adc	r27, r27
     e04:	26 17       	cp	r18, r22
     e06:	37 07       	cpc	r19, r23
     e08:	48 07       	cpc	r20, r24
     e0a:	ab 07       	cpc	r26, r27
     e0c:	b0 e8       	ldi	r27, 0x80	; 128
     e0e:	09 f0       	breq	.+2      	; 0xe12 <__divsf3_pse+0x56>
     e10:	bb 0b       	sbc	r27, r27
     e12:	80 2d       	mov	r24, r0
     e14:	bf 01       	movw	r22, r30
     e16:	ff 27       	eor	r31, r31
     e18:	93 58       	subi	r25, 0x83	; 131
     e1a:	5f 4f       	sbci	r21, 0xFF	; 255
     e1c:	3a f0       	brmi	.+14     	; 0xe2c <__divsf3_pse+0x70>
     e1e:	9e 3f       	cpi	r25, 0xFE	; 254
     e20:	51 05       	cpc	r21, r1
     e22:	78 f0       	brcs	.+30     	; 0xe42 <__divsf3_pse+0x86>
     e24:	0c 94 a6 07 	jmp	0xf4c	; 0xf4c <__fp_inf>
     e28:	0c 94 f1 07 	jmp	0xfe2	; 0xfe2 <__fp_szero>
     e2c:	5f 3f       	cpi	r21, 0xFF	; 255
     e2e:	e4 f3       	brlt	.-8      	; 0xe28 <__divsf3_pse+0x6c>
     e30:	98 3e       	cpi	r25, 0xE8	; 232
     e32:	d4 f3       	brlt	.-12     	; 0xe28 <__divsf3_pse+0x6c>
     e34:	86 95       	lsr	r24
     e36:	77 95       	ror	r23
     e38:	67 95       	ror	r22
     e3a:	b7 95       	ror	r27
     e3c:	f7 95       	ror	r31
     e3e:	9f 5f       	subi	r25, 0xFF	; 255
     e40:	c9 f7       	brne	.-14     	; 0xe34 <__divsf3_pse+0x78>
     e42:	88 0f       	add	r24, r24
     e44:	91 1d       	adc	r25, r1
     e46:	96 95       	lsr	r25
     e48:	87 95       	ror	r24
     e4a:	97 f9       	bld	r25, 7
     e4c:	08 95       	ret
     e4e:	e1 e0       	ldi	r30, 0x01	; 1
     e50:	66 0f       	add	r22, r22
     e52:	77 1f       	adc	r23, r23
     e54:	88 1f       	adc	r24, r24
     e56:	bb 1f       	adc	r27, r27
     e58:	62 17       	cp	r22, r18
     e5a:	73 07       	cpc	r23, r19
     e5c:	84 07       	cpc	r24, r20
     e5e:	ba 07       	cpc	r27, r26
     e60:	20 f0       	brcs	.+8      	; 0xe6a <__divsf3_pse+0xae>
     e62:	62 1b       	sub	r22, r18
     e64:	73 0b       	sbc	r23, r19
     e66:	84 0b       	sbc	r24, r20
     e68:	ba 0b       	sbc	r27, r26
     e6a:	ee 1f       	adc	r30, r30
     e6c:	88 f7       	brcc	.-30     	; 0xe50 <__divsf3_pse+0x94>
     e6e:	e0 95       	com	r30
     e70:	08 95       	ret

00000e72 <__fixunssfsi>:
     e72:	0e 94 d6 07 	call	0xfac	; 0xfac <__fp_splitA>
     e76:	88 f0       	brcs	.+34     	; 0xe9a <__fixunssfsi+0x28>
     e78:	9f 57       	subi	r25, 0x7F	; 127
     e7a:	98 f0       	brcs	.+38     	; 0xea2 <__fixunssfsi+0x30>
     e7c:	b9 2f       	mov	r27, r25
     e7e:	99 27       	eor	r25, r25
     e80:	b7 51       	subi	r27, 0x17	; 23
     e82:	b0 f0       	brcs	.+44     	; 0xeb0 <__fixunssfsi+0x3e>
     e84:	e1 f0       	breq	.+56     	; 0xebe <__fixunssfsi+0x4c>
     e86:	66 0f       	add	r22, r22
     e88:	77 1f       	adc	r23, r23
     e8a:	88 1f       	adc	r24, r24
     e8c:	99 1f       	adc	r25, r25
     e8e:	1a f0       	brmi	.+6      	; 0xe96 <__fixunssfsi+0x24>
     e90:	ba 95       	dec	r27
     e92:	c9 f7       	brne	.-14     	; 0xe86 <__fixunssfsi+0x14>
     e94:	14 c0       	rjmp	.+40     	; 0xebe <__fixunssfsi+0x4c>
     e96:	b1 30       	cpi	r27, 0x01	; 1
     e98:	91 f0       	breq	.+36     	; 0xebe <__fixunssfsi+0x4c>
     e9a:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <__fp_zero>
     e9e:	b1 e0       	ldi	r27, 0x01	; 1
     ea0:	08 95       	ret
     ea2:	0c 94 f0 07 	jmp	0xfe0	; 0xfe0 <__fp_zero>
     ea6:	67 2f       	mov	r22, r23
     ea8:	78 2f       	mov	r23, r24
     eaa:	88 27       	eor	r24, r24
     eac:	b8 5f       	subi	r27, 0xF8	; 248
     eae:	39 f0       	breq	.+14     	; 0xebe <__fixunssfsi+0x4c>
     eb0:	b9 3f       	cpi	r27, 0xF9	; 249
     eb2:	cc f3       	brlt	.-14     	; 0xea6 <__fixunssfsi+0x34>
     eb4:	86 95       	lsr	r24
     eb6:	77 95       	ror	r23
     eb8:	67 95       	ror	r22
     eba:	b3 95       	inc	r27
     ebc:	d9 f7       	brne	.-10     	; 0xeb4 <__fixunssfsi+0x42>
     ebe:	3e f4       	brtc	.+14     	; 0xece <__fixunssfsi+0x5c>
     ec0:	90 95       	com	r25
     ec2:	80 95       	com	r24
     ec4:	70 95       	com	r23
     ec6:	61 95       	neg	r22
     ec8:	7f 4f       	sbci	r23, 0xFF	; 255
     eca:	8f 4f       	sbci	r24, 0xFF	; 255
     ecc:	9f 4f       	sbci	r25, 0xFF	; 255
     ece:	08 95       	ret

00000ed0 <__floatundisf>:
     ed0:	e8 94       	clt

00000ed2 <__fp_di2sf>:
     ed2:	f9 2f       	mov	r31, r25
     ed4:	96 eb       	ldi	r25, 0xB6	; 182
     ed6:	ff 23       	and	r31, r31
     ed8:	81 f0       	breq	.+32     	; 0xefa <__fp_di2sf+0x28>
     eda:	12 16       	cp	r1, r18
     edc:	13 06       	cpc	r1, r19
     ede:	14 06       	cpc	r1, r20
     ee0:	44 0b       	sbc	r20, r20
     ee2:	93 95       	inc	r25
     ee4:	f6 95       	lsr	r31
     ee6:	87 95       	ror	r24
     ee8:	77 95       	ror	r23
     eea:	67 95       	ror	r22
     eec:	57 95       	ror	r21
     eee:	40 40       	sbci	r20, 0x00	; 0
     ef0:	ff 23       	and	r31, r31
     ef2:	b9 f7       	brne	.-18     	; 0xee2 <__fp_di2sf+0x10>
     ef4:	1b c0       	rjmp	.+54     	; 0xf2c <__fp_di2sf+0x5a>
     ef6:	99 27       	eor	r25, r25
     ef8:	08 95       	ret
     efa:	88 23       	and	r24, r24
     efc:	51 f4       	brne	.+20     	; 0xf12 <__fp_di2sf+0x40>
     efe:	98 50       	subi	r25, 0x08	; 8
     f00:	d2 f7       	brpl	.-12     	; 0xef6 <__fp_di2sf+0x24>
     f02:	87 2b       	or	r24, r23
     f04:	76 2f       	mov	r23, r22
     f06:	65 2f       	mov	r22, r21
     f08:	54 2f       	mov	r21, r20
     f0a:	43 2f       	mov	r20, r19
     f0c:	32 2f       	mov	r19, r18
     f0e:	20 e0       	ldi	r18, 0x00	; 0
     f10:	b1 f3       	breq	.-20     	; 0xefe <__fp_di2sf+0x2c>
     f12:	12 16       	cp	r1, r18
     f14:	13 06       	cpc	r1, r19
     f16:	14 06       	cpc	r1, r20
     f18:	44 0b       	sbc	r20, r20
     f1a:	88 23       	and	r24, r24
     f1c:	3a f0       	brmi	.+14     	; 0xf2c <__fp_di2sf+0x5a>
     f1e:	9a 95       	dec	r25
     f20:	44 0f       	add	r20, r20
     f22:	55 1f       	adc	r21, r21
     f24:	66 1f       	adc	r22, r22
     f26:	77 1f       	adc	r23, r23
     f28:	88 1f       	adc	r24, r24
     f2a:	ca f7       	brpl	.-14     	; 0xf1e <__fp_di2sf+0x4c>
     f2c:	55 23       	and	r21, r21
     f2e:	4a f4       	brpl	.+18     	; 0xf42 <__fp_di2sf+0x70>
     f30:	44 0f       	add	r20, r20
     f32:	55 1f       	adc	r21, r21
     f34:	11 f4       	brne	.+4      	; 0xf3a <__fp_di2sf+0x68>
     f36:	60 ff       	sbrs	r22, 0
     f38:	04 c0       	rjmp	.+8      	; 0xf42 <__fp_di2sf+0x70>
     f3a:	6f 5f       	subi	r22, 0xFF	; 255
     f3c:	7f 4f       	sbci	r23, 0xFF	; 255
     f3e:	8f 4f       	sbci	r24, 0xFF	; 255
     f40:	9f 4f       	sbci	r25, 0xFF	; 255
     f42:	88 0f       	add	r24, r24
     f44:	96 95       	lsr	r25
     f46:	87 95       	ror	r24
     f48:	97 f9       	bld	r25, 7
     f4a:	08 95       	ret

00000f4c <__fp_inf>:
     f4c:	97 f9       	bld	r25, 7
     f4e:	9f 67       	ori	r25, 0x7F	; 127
     f50:	80 e8       	ldi	r24, 0x80	; 128
     f52:	70 e0       	ldi	r23, 0x00	; 0
     f54:	60 e0       	ldi	r22, 0x00	; 0
     f56:	08 95       	ret

00000f58 <__fp_nan>:
     f58:	9f ef       	ldi	r25, 0xFF	; 255
     f5a:	80 ec       	ldi	r24, 0xC0	; 192
     f5c:	08 95       	ret

00000f5e <__fp_pscA>:
     f5e:	00 24       	eor	r0, r0
     f60:	0a 94       	dec	r0
     f62:	16 16       	cp	r1, r22
     f64:	17 06       	cpc	r1, r23
     f66:	18 06       	cpc	r1, r24
     f68:	09 06       	cpc	r0, r25
     f6a:	08 95       	ret

00000f6c <__fp_pscB>:
     f6c:	00 24       	eor	r0, r0
     f6e:	0a 94       	dec	r0
     f70:	12 16       	cp	r1, r18
     f72:	13 06       	cpc	r1, r19
     f74:	14 06       	cpc	r1, r20
     f76:	05 06       	cpc	r0, r21
     f78:	08 95       	ret

00000f7a <__fp_round>:
     f7a:	09 2e       	mov	r0, r25
     f7c:	03 94       	inc	r0
     f7e:	00 0c       	add	r0, r0
     f80:	11 f4       	brne	.+4      	; 0xf86 <__fp_round+0xc>
     f82:	88 23       	and	r24, r24
     f84:	52 f0       	brmi	.+20     	; 0xf9a <__fp_round+0x20>
     f86:	bb 0f       	add	r27, r27
     f88:	40 f4       	brcc	.+16     	; 0xf9a <__fp_round+0x20>
     f8a:	bf 2b       	or	r27, r31
     f8c:	11 f4       	brne	.+4      	; 0xf92 <__fp_round+0x18>
     f8e:	60 ff       	sbrs	r22, 0
     f90:	04 c0       	rjmp	.+8      	; 0xf9a <__fp_round+0x20>
     f92:	6f 5f       	subi	r22, 0xFF	; 255
     f94:	7f 4f       	sbci	r23, 0xFF	; 255
     f96:	8f 4f       	sbci	r24, 0xFF	; 255
     f98:	9f 4f       	sbci	r25, 0xFF	; 255
     f9a:	08 95       	ret

00000f9c <__fp_split3>:
     f9c:	57 fd       	sbrc	r21, 7
     f9e:	90 58       	subi	r25, 0x80	; 128
     fa0:	44 0f       	add	r20, r20
     fa2:	55 1f       	adc	r21, r21
     fa4:	59 f0       	breq	.+22     	; 0xfbc <__fp_splitA+0x10>
     fa6:	5f 3f       	cpi	r21, 0xFF	; 255
     fa8:	71 f0       	breq	.+28     	; 0xfc6 <__fp_splitA+0x1a>
     faa:	47 95       	ror	r20

00000fac <__fp_splitA>:
     fac:	88 0f       	add	r24, r24
     fae:	97 fb       	bst	r25, 7
     fb0:	99 1f       	adc	r25, r25
     fb2:	61 f0       	breq	.+24     	; 0xfcc <__fp_splitA+0x20>
     fb4:	9f 3f       	cpi	r25, 0xFF	; 255
     fb6:	79 f0       	breq	.+30     	; 0xfd6 <__fp_splitA+0x2a>
     fb8:	87 95       	ror	r24
     fba:	08 95       	ret
     fbc:	12 16       	cp	r1, r18
     fbe:	13 06       	cpc	r1, r19
     fc0:	14 06       	cpc	r1, r20
     fc2:	55 1f       	adc	r21, r21
     fc4:	f2 cf       	rjmp	.-28     	; 0xfaa <__fp_split3+0xe>
     fc6:	46 95       	lsr	r20
     fc8:	f1 df       	rcall	.-30     	; 0xfac <__fp_splitA>
     fca:	08 c0       	rjmp	.+16     	; 0xfdc <__fp_splitA+0x30>
     fcc:	16 16       	cp	r1, r22
     fce:	17 06       	cpc	r1, r23
     fd0:	18 06       	cpc	r1, r24
     fd2:	99 1f       	adc	r25, r25
     fd4:	f1 cf       	rjmp	.-30     	; 0xfb8 <__fp_splitA+0xc>
     fd6:	86 95       	lsr	r24
     fd8:	71 05       	cpc	r23, r1
     fda:	61 05       	cpc	r22, r1
     fdc:	08 94       	sec
     fde:	08 95       	ret

00000fe0 <__fp_zero>:
     fe0:	e8 94       	clt

00000fe2 <__fp_szero>:
     fe2:	bb 27       	eor	r27, r27
     fe4:	66 27       	eor	r22, r22
     fe6:	77 27       	eor	r23, r23
     fe8:	cb 01       	movw	r24, r22
     fea:	97 f9       	bld	r25, 7
     fec:	08 95       	ret

00000fee <__divmodhi4>:
     fee:	97 fb       	bst	r25, 7
     ff0:	07 2e       	mov	r0, r23
     ff2:	16 f4       	brtc	.+4      	; 0xff8 <__divmodhi4+0xa>
     ff4:	00 94       	com	r0
     ff6:	07 d0       	rcall	.+14     	; 0x1006 <__divmodhi4_neg1>
     ff8:	77 fd       	sbrc	r23, 7
     ffa:	09 d0       	rcall	.+18     	; 0x100e <__divmodhi4_neg2>
     ffc:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__udivmodhi4>
    1000:	07 fc       	sbrc	r0, 7
    1002:	05 d0       	rcall	.+10     	; 0x100e <__divmodhi4_neg2>
    1004:	3e f4       	brtc	.+14     	; 0x1014 <__divmodhi4_exit>

00001006 <__divmodhi4_neg1>:
    1006:	90 95       	com	r25
    1008:	81 95       	neg	r24
    100a:	9f 4f       	sbci	r25, 0xFF	; 255
    100c:	08 95       	ret

0000100e <__divmodhi4_neg2>:
    100e:	70 95       	com	r23
    1010:	61 95       	neg	r22
    1012:	7f 4f       	sbci	r23, 0xFF	; 255

00001014 <__divmodhi4_exit>:
    1014:	08 95       	ret

00001016 <__muldi3>:
    1016:	df 93       	push	r29
    1018:	cf 93       	push	r28
    101a:	1f 93       	push	r17
    101c:	0f 93       	push	r16
    101e:	9a 9d       	mul	r25, r10
    1020:	f0 2d       	mov	r31, r0
    1022:	21 9f       	mul	r18, r17
    1024:	f0 0d       	add	r31, r0
    1026:	8b 9d       	mul	r24, r11
    1028:	f0 0d       	add	r31, r0
    102a:	8a 9d       	mul	r24, r10
    102c:	e0 2d       	mov	r30, r0
    102e:	f1 0d       	add	r31, r1
    1030:	03 9f       	mul	r16, r19
    1032:	f0 0d       	add	r31, r0
    1034:	02 9f       	mul	r16, r18
    1036:	e0 0d       	add	r30, r0
    1038:	f1 1d       	adc	r31, r1
    103a:	4e 9d       	mul	r20, r14
    103c:	e0 0d       	add	r30, r0
    103e:	f1 1d       	adc	r31, r1
    1040:	5e 9d       	mul	r21, r14
    1042:	f0 0d       	add	r31, r0
    1044:	4f 9d       	mul	r20, r15
    1046:	f0 0d       	add	r31, r0
    1048:	7f 93       	push	r23
    104a:	6f 93       	push	r22
    104c:	bf 92       	push	r11
    104e:	af 92       	push	r10
    1050:	5f 93       	push	r21
    1052:	4f 93       	push	r20
    1054:	d5 01       	movw	r26, r10
    1056:	0e 94 78 08 	call	0x10f0	; 0x10f0 <__umulhisi3>
    105a:	8b 01       	movw	r16, r22
    105c:	ac 01       	movw	r20, r24
    105e:	d7 01       	movw	r26, r14
    1060:	0e 94 78 08 	call	0x10f0	; 0x10f0 <__umulhisi3>
    1064:	eb 01       	movw	r28, r22
    1066:	e8 0f       	add	r30, r24
    1068:	f9 1f       	adc	r31, r25
    106a:	d6 01       	movw	r26, r12
    106c:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__muldi3_6>
    1070:	2f 91       	pop	r18
    1072:	3f 91       	pop	r19
    1074:	d6 01       	movw	r26, r12
    1076:	0e 94 78 08 	call	0x10f0	; 0x10f0 <__umulhisi3>
    107a:	c6 0f       	add	r28, r22
    107c:	d7 1f       	adc	r29, r23
    107e:	e8 1f       	adc	r30, r24
    1080:	f9 1f       	adc	r31, r25
    1082:	af 91       	pop	r26
    1084:	bf 91       	pop	r27
    1086:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__muldi3_6>
    108a:	2f 91       	pop	r18
    108c:	3f 91       	pop	r19
    108e:	0e 94 78 08 	call	0x10f0	; 0x10f0 <__umulhisi3>
    1092:	c6 0f       	add	r28, r22
    1094:	d7 1f       	adc	r29, r23
    1096:	e8 1f       	adc	r30, r24
    1098:	f9 1f       	adc	r31, r25
    109a:	d6 01       	movw	r26, r12
    109c:	0e 94 78 08 	call	0x10f0	; 0x10f0 <__umulhisi3>
    10a0:	e6 0f       	add	r30, r22
    10a2:	f7 1f       	adc	r31, r23
    10a4:	98 01       	movw	r18, r16
    10a6:	be 01       	movw	r22, r28
    10a8:	cf 01       	movw	r24, r30
    10aa:	11 24       	eor	r1, r1
    10ac:	0f 91       	pop	r16
    10ae:	1f 91       	pop	r17
    10b0:	cf 91       	pop	r28
    10b2:	df 91       	pop	r29
    10b4:	08 95       	ret

000010b6 <__muldi3_6>:
    10b6:	0e 94 78 08 	call	0x10f0	; 0x10f0 <__umulhisi3>
    10ba:	46 0f       	add	r20, r22
    10bc:	57 1f       	adc	r21, r23
    10be:	c8 1f       	adc	r28, r24
    10c0:	d9 1f       	adc	r29, r25
    10c2:	08 f4       	brcc	.+2      	; 0x10c6 <__muldi3_6+0x10>
    10c4:	31 96       	adiw	r30, 0x01	; 1
    10c6:	08 95       	ret

000010c8 <__udivmodhi4>:
    10c8:	aa 1b       	sub	r26, r26
    10ca:	bb 1b       	sub	r27, r27
    10cc:	51 e1       	ldi	r21, 0x11	; 17
    10ce:	07 c0       	rjmp	.+14     	; 0x10de <__udivmodhi4_ep>

000010d0 <__udivmodhi4_loop>:
    10d0:	aa 1f       	adc	r26, r26
    10d2:	bb 1f       	adc	r27, r27
    10d4:	a6 17       	cp	r26, r22
    10d6:	b7 07       	cpc	r27, r23
    10d8:	10 f0       	brcs	.+4      	; 0x10de <__udivmodhi4_ep>
    10da:	a6 1b       	sub	r26, r22
    10dc:	b7 0b       	sbc	r27, r23

000010de <__udivmodhi4_ep>:
    10de:	88 1f       	adc	r24, r24
    10e0:	99 1f       	adc	r25, r25
    10e2:	5a 95       	dec	r21
    10e4:	a9 f7       	brne	.-22     	; 0x10d0 <__udivmodhi4_loop>
    10e6:	80 95       	com	r24
    10e8:	90 95       	com	r25
    10ea:	bc 01       	movw	r22, r24
    10ec:	cd 01       	movw	r24, r26
    10ee:	08 95       	ret

000010f0 <__umulhisi3>:
    10f0:	a2 9f       	mul	r26, r18
    10f2:	b0 01       	movw	r22, r0
    10f4:	b3 9f       	mul	r27, r19
    10f6:	c0 01       	movw	r24, r0
    10f8:	a3 9f       	mul	r26, r19
    10fa:	70 0d       	add	r23, r0
    10fc:	81 1d       	adc	r24, r1
    10fe:	11 24       	eor	r1, r1
    1100:	91 1d       	adc	r25, r1
    1102:	b2 9f       	mul	r27, r18
    1104:	70 0d       	add	r23, r0
    1106:	81 1d       	adc	r24, r1
    1108:	11 24       	eor	r1, r1
    110a:	91 1d       	adc	r25, r1
    110c:	08 95       	ret

0000110e <_exit>:
    110e:	f8 94       	cli

00001110 <__stop_program>:
    1110:	ff cf       	rjmp	.-2      	; 0x1110 <__stop_program>
